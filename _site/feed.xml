<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-03T22:00:36+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Joshua Kim</title><subtitle>Analytics Engineer | Data Analyst</subtitle><entry><title type="html">dbt Docs 사내 공유 방법 (사이트 호스팅 후기)</title><link href="http://localhost:4000/dbt-docs-site-hosting-ko/" rel="alternate" type="text/html" title="dbt Docs 사내 공유 방법 (사이트 호스팅 후기)" /><published>2024-09-21T00:00:00+09:00</published><updated>2024-09-21T00:00:00+09:00</updated><id>http://localhost:4000/dbt-docs-site-hosting-ko</id><content type="html" xml:base="http://localhost:4000/dbt-docs-site-hosting-ko/"><![CDATA[<blockquote>
  <p>“사내에서 dbt Docs를 활용하여 데이터 웨어하우스 문서화를 자동화하고 이를 통해 사내 데이터 접근성과 효율성을 높이기 위한 작업을 수행했습니다. 특히, dbt의 자동 문서화 기능을 활용해 테이블 간 의존성 및 명세서를 최신화함으로써 데이터 활용의 정확성과 속도를 개선했습니다. 이를 위해 VM 인스턴스에서 dbt Docs를 호스팅하고 사내 IP 범위 내 구성원들이 접근할 수 있도록 방화벽 설정을 추가하는 등의 기술적 문제를 해결하며 성공적으로 시스템을 구축했습니다.”</p>
</blockquote>

<hr />

<h1 id="목차">목차</h1>
<ol>
  <li>dbt Docs란 무엇인가?</li>
  <li>배경</li>
  <li>목표</li>
  <li>진행 과정</li>
  <li>결론</li>
</ol>

<hr />

<h1 id="1-dbt-docs란-무엇인가">1. dbt Docs란 무엇인가?</h1>

<p><a href="https://www.getdbt.com/">dbt</a>는 ELT 파이프라인의 Transformation 단계에 특화된 자동화 프레임워크로, Data Analyst와 Analytics Engineer 분들을 중심으로 널리 사용됩니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/1.webp" alt="" />
<img src="/assets/2024-09-21-dbt-docs-site-hosting/2.webp" alt="" /></p>

<p>dbt는 테이블 간의 의존 관계를 바탕으로 Data Lineage를 분석하고, 그 결과를 DAG (Directed Acyclic Graph) 형태로 컴파일하여 전체 Transformation 과정을 자동으로 실행해줍니다. 이를 통해 데이터 웨어하우스의 Orchestration 관리를 보다 효율적으로 진행할 수 있는데요. dbt의 가장 큰 장점 중 하나는 “자동 문서화” 기능입니다.</p>

<p>(1) <strong>Lineage Graph</strong>: 테이블 간의 의존성을 시각적으로 보여주어, 유지보수 작업시 영향을 받는 테이블들을 한 눈에 파악할 수 있도록 도와줍니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/3.webp" alt="" /></p>

<p>(2) <strong>명세서 확인</strong>: 각 테이블과 컬럼의 Description 등 세부적인 명세서를 쉽게 확인할 수 있습니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/4.gif" alt="" />
<img src="/assets/2024-09-21-dbt-docs-site-hosting/5.gif" alt="" /></p>

<p>dbt Docs는 데이터팀의 주요 Pain Point를 해결하는 데 큰 도움이 됩니다. 많은 기업이 데이터 활용도를 높이기 위해 데이터 웨어하우스를 도입하지만, 수많은 데이터 마트와 테이블 구조로 인해 혼란스러워 사내 구성원들의 접근성이 떨어지는 아이러니한 상황에 쉽게 직면하곤 합니다. 특히 프로덕트의 급성장에 따라 조직의 데이터 의존도가 높아지면, 데이터 웨어하우스의 빌딩 속도에 집중하느라 품질, 정합성, 접근성, 명세서 작성 관리를 유지하기가 어려워지기도 쉽습니다.</p>

<p>dbt는 데이터 웨어하우스 전체의 명세를 자동으로 문서화해 이러한 문제를 해결하며, 데이터의 품질과 활용성을 높이는 중요한 역할을 하는 것입니다.</p>

<hr />

<h1 id="2-배경">2. 배경</h1>

<p>저는 사내에서 쿼리 작성 역량을 갖춘 구성원 분들이 테이블과 Lineage 문서를 확인하여 Redash 대시보드를 직접 만들 수 있는 환경을 제공하고자 했습니다. 즉, 데이터 웨어하우스 문서화가 필요했던 것이죠. 구글 시트나 노션 페이지 등을 활용하는 것도 고려해봤지만, 애널리틱스 엔지니어링 작업과 문서화 작업이 분리되면 다음과 같은 문제가 발생할 수 있다는 노파심이 들었습니다.</p>

<ul>
  <li>데이터 마트 생성과 문서화 사이의 Latency로 인해 커뮤니케이션 속도가 저하될 수 있다.</li>
  <li>개별적인 문서화 작업 중 휴먼 에러가 발생하여 부정확한 쿼리 결과를 낳을 수 있다.</li>
</ul>

<p>따라서 저는 문서화 환경이 애널리틱스 엔지니어링 본연의 작업과 분리되어 이중으로 진행되는 것은 결코 바람직하지 않다고 판단했으며, 반복적인 작업 루틴을 줄임으로써 더 중요한 가치를 창출하는 데 시간을 쓰고 싶었습니다.</p>

<hr />

<h1 id="3-목표">3. 목표</h1>

<p>dbt Docs 기능을 통해 사내 구성원 분들이 dbt 프로젝트 버전 업데이트 즉시 최신 명세를 확인할 수 있는 Docs 사이트를 호스팅하는 것이 이번 작업의 목표였습니다.</p>

<hr />

<h1 id="4-진행-과정">4. 진행 과정</h1>

<h3 id="41-dbt-프로젝트-관리-현황">4.1. dbt 프로젝트 관리 현황</h3>

<p>BigQuery 프로젝트 내에서 소스 테이블들을 Core Layer, Mart Layer로 변환하는 작업을 실행하고 있습니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/6.webp" alt="" /></p>

<p>모든 Transformation 과정은 dbt 프로젝트를 통해 Google Cloud의 VM Instance 내에서 주기적으로 실행되고 있습니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/7.webp" alt="" /></p>

<h3 id="42-로컬-호스팅의-문제점">4.2. 로컬 호스팅의 문제점</h3>

<p>여타 프레임워크와 마찬가지로, dbt Docs를 호스팅할 경우 기본적으로 해당 Host Machine에서만 접속이 가능합니다. 즉, dbt 프로젝트가 있는 VM Instance에서 접속하거나, 혹은 SSH Key를 사용해 Remote 연결된 Local Machine에서만 접속할 수 있는 것입니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/8.webp" alt="" /></p>

<p>하지만 사내 구성원들도 접속할 수 있는 환경을 마련해야 했습니다. 즉, SSH Key가 없지만 동일한 IP 주소 범위 내에서 접속하는 각 Machine에서 dbt Docs 사이트에 접속할 수 있도록 지원해야 했던 것이죠.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/9.webp" alt="" /></p>

<h3 id="43-dbt-docs-호스팅-시작하기">4.3. dbt Docs 호스팅 시작하기</h3>

<p>다음은 사내 구성원들의 접속 환경을 마련하기 위해 설정한 단계들입니다.</p>

<p>(1) <code class="language-plaintext highlighter-rouge">tmux</code> 세션 생성</p>

<p><code class="language-plaintext highlighter-rouge">tmux</code>를 통해 VM Instance에서 dbt Docs 호스팅을 유지하는 독립 세션을 만들었습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   tmux new <span class="nt">-s</span> dbt_docs <span class="c"># dbt_docs 이름의 세션을 생성합니다.</span>
   tmux attach <span class="nt">-t</span> dbt_docs <span class="c"># dbt_docs 세션에 Attach합니다.</span>
</code></pre></div></div>

<p>(2) 사이트 빌드</p>

<p>dbt 프로젝트의 파일들을 컴파일하여 Docs 사이트를 빌드했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nb">source </span>dbt-venv/bin/activate <span class="c"># Python Virtual Environment 활성화</span>
   <span class="nb">export </span><span class="nv">DBT_PROFILES_DIR</span><span class="o">=</span><span class="s2">"path/to/profiles.yml"</span> <span class="c"># DBT_PROFILES_DIR 환경변수 정의</span>
   dbt docs generate <span class="nt">--target</span> prod <span class="c"># prod 스키마 기준으로 dbt Docs 빌드하기</span>
</code></pre></div></div>

<p>(3) 사이트 호스팅 시작</p>

<p>Docs 사이트 호스팅을 시작한 후, 해당 세션으로부터 Detach하여 빠져나왔습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   dbt docs serve <span class="nt">--host</span> 0.0.0.0 <span class="nt">--port</span> 8080 <span class="c"># host 도메인과 port를 파라미터로 명시하기</span>
</code></pre></div></div>

<p>(4) VM Instance 설정</p>

<p>VM Instance의 External IP를 확인하고, 수정 페이지에서 Network Tag를 추가했습니다.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/10.webp" alt="" />
<img src="/assets/2024-09-21-dbt-docs-site-hosting/11.webp" alt="" /></p>

<p>(5) VPC 방화벽 규칙 추가</p>

<p>Firewall policies 콘솔에 들어가서 VPC fire rules를 다음과 같이 추가했습니다.</p>

<ul>
  <li><strong>방향</strong>: 인그레스 (Ingress)</li>
  <li><strong>소스 IPv4 범위</strong>: 사내 IPv4 범위 (CIDR 형식)</li>
  <li><strong>타겟 Tags</strong>: 방금 전 VM Instance에 추가한 Network Tag (dbt-docs-serve)</li>
  <li><strong>프로토콜 및 포트</strong>: 방금 전 호스팅한 dbt Docs의 Port (8080)</li>
</ul>

<p>(6) 접속 주소</p>

<p>이제 사내 IPv4 범위 내에서 다음 주소로 접속하면 됩니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">http://{VM Instance의 External IP}:8080</code></li>
</ul>

<p>(7) 구성된 환경을 요약하면 다음과 같습니다.</p>

<blockquote>
  <p>“사내 IPv4 범위 내에서 VM 인스턴스의 External IP 주소에 Port 8080으로 접속하면, 호스팅 중인 dbt Docs 사이트가 로드됩니다!”</p>
</blockquote>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/12.webp" alt="" /></p>

<hr />

<h1 id="5-결론">5. 결론</h1>

<p>dbt Docs 사이트 링크를 슬랙 채널에 고정(Pin)하여 구성원 분들이 추후 편리하게 접속하실 수 있도록 설정했습니다. 앞으로 기업과 프로덕트가 성장함에 따라 데이터 활용의 수요는 지속적으로 커질 것입니다. dbt의 “자동 문서화” 기능을 통해 문서화 리소스를 절감하고, 데이터 본연의 업무 효율성을 높일 수 있을 것입니다.</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>

<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (Korean)" /><category term="Article (Issue Resolution)" /><category term="Level (1. Beginner)" /><category term="Field (Analytics Engineering)" /><category term="Skills (Linux)" /><summary type="html"><![CDATA[“사내에서 dbt Docs를 활용하여 데이터 웨어하우스 문서화를 자동화하고 이를 통해 사내 데이터 접근성과 효율성을 높이기 위한 작업을 수행했습니다. 특히, dbt의 자동 문서화 기능을 활용해 테이블 간 의존성 및 명세서를 최신화함으로써 데이터 활용의 정확성과 속도를 개선했습니다. 이를 위해 VM 인스턴스에서 dbt Docs를 호스팅하고 사내 IP 범위 내 구성원들이 접근할 수 있도록 방화벽 설정을 추가하는 등의 기술적 문제를 해결하며 성공적으로 시스템을 구축했습니다.”]]></summary></entry><entry><title type="html">How to Share dbt Docs Internally (Site Hosting Review)</title><link href="http://localhost:4000/dbt-docs-site-hosting-en/" rel="alternate" type="text/html" title="How to Share dbt Docs Internally (Site Hosting Review)" /><published>2024-09-21T00:00:00+09:00</published><updated>2024-09-21T00:00:00+09:00</updated><id>http://localhost:4000/dbt-docs-site-hosting-en</id><content type="html" xml:base="http://localhost:4000/dbt-docs-site-hosting-en/"><![CDATA[<blockquote>
  <p>“I worked on automating data warehouse documentation using dbt Docs within the company, aiming to improve internal data accessibility and efficiency. Specifically, I utilized dbt’s automated documentation feature to keep dependencies between tables and specifications up to date, thereby improving the accuracy and speed of data usage. I successfully built the system by resolving technical issues, such as hosting dbt Docs on a VM instance and adding firewall settings to allow internal team members to access it within the company’s IP range.”</p>
</blockquote>

<hr />

<h1 id="table-of-contents">Table of Contents</h1>
<ol>
  <li>What is dbt Docs?</li>
  <li>Background</li>
  <li>Objective</li>
  <li>Process</li>
  <li>Conclusion</li>
</ol>

<hr />

<h1 id="1-what-is-dbt-docs">1. What is dbt Docs?</h1>

<p><a href="https://www.getdbt.com/">dbt</a> is an automation framework specialized in the transformation phase of the ELT pipeline, widely used by data analysts and analytics engineers.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/1.webp" alt="" />
<img src="/assets/2024-09-21-dbt-docs-site-hosting/2.webp" alt="" /></p>

<p>dbt analyzes data lineage based on table dependencies and compiles it into a DAG (Directed Acyclic Graph) to automatically execute the entire transformation process. This enables more efficient orchestration management of data warehouses. One of dbt’s key strengths is its “automated documentation” feature.</p>

<p>(1) <strong>Lineage Graph</strong>: Visually displays table dependencies, allowing you to easily identify the tables affected during maintenance tasks.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/3.webp" alt="" /></p>

<p>(2) <strong>View Specifications</strong>: Easily check detailed specifications, such as descriptions of each table and column.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/4.gif" alt="" />
<img src="/assets/2024-09-21-dbt-docs-site-hosting/5.gif" alt="" /></p>

<p>dbt Docs is highly effective in addressing major pain points for data teams. While many companies adopt data warehouses to enhance data utilization, they often face the ironic situation where the complexity of numerous data marts and table structures reduces internal accessibility. As the organization’s dependence on data increases with the rapid growth of its products, maintaining quality, accuracy, accessibility, and documentation can become increasingly difficult.</p>

<p>dbt solves this problem by automatically documenting the entire data warehouse, playing a key role in improving data quality and usability.</p>

<hr />

<h1 id="2-background">2. Background</h1>

<p>I wanted to provide an environment where internal members with query-writing skills could view table and lineage documentation and directly create Redash dashboards. In other words, data warehouse documentation was necessary. Although I considered using Google Sheets or Notion pages, I was concerned that separating analytics engineering and documentation tasks could lead to the following issues:</p>

<ul>
  <li>Communication could slow down due to latency between data mart creation and documentation.</li>
  <li>Human error during individual documentation could result in inaccurate query outcomes.</li>
</ul>

<p>Thus, I concluded that it was not ideal for the documentation environment to be separated from the core analytics engineering work. I wanted to reduce repetitive tasks and spend more time creating value in more critical areas.</p>

<hr />

<h1 id="3-objective">3. Objective</h1>

<p>The goal of this project was to host a dbt Docs site where internal members could check the latest specifications as soon as the dbt project version was updated.</p>

<hr />

<h1 id="4-process">4. Process</h1>

<h3 id="41-current-dbt-project-management">4.1. Current dbt Project Management</h3>

<p>I’ve been working on converting source tables into Core Layer and Mart Layer within the BigQuery project.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/6.webp" alt="" /></p>

<p>All transformation processes are periodically executed via a dbt project on a Google Cloud VM instance.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/7.webp" alt="" /></p>

<h3 id="42-issues-with-local-hosting">4.2. Issues with Local Hosting</h3>

<p>As with other frameworks, hosting dbt Docs is, by default, only accessible from the host machine. In other words, you can only access it from the VM instance where the dbt project is located or from a locally connected machine via SSH.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/8.webp" alt="" /></p>

<p>However, I needed to create an environment where internal members could also access it. In short, I had to allow machines within the same IP range, but without SSH keys, to access the dbt Docs site.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/9.webp" alt="" /></p>

<h3 id="43-starting-dbt-docs-hosting">4.3. Starting dbt Docs Hosting</h3>

<p>Here are the steps I followed to set up the internal access environment:</p>

<p>(1) Create a <code class="language-plaintext highlighter-rouge">tmux</code> session</p>

<p>I used <code class="language-plaintext highlighter-rouge">tmux</code> to create an independent session on the VM instance to maintain the dbt Docs hosting.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   tmux new <span class="nt">-s</span> dbt_docs <span class="c"># Create a session named dbt_docs</span>
   tmux attach <span class="nt">-t</span> dbt_docs <span class="c"># Attach to the dbt_docs session</span>
</code></pre></div></div>

<p>(2) Build the site</p>

<p>I compiled the dbt project files to build the Docs site.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nb">source </span>dbt-venv/bin/activate <span class="c"># Activate Python Virtual Environment</span>
   <span class="nb">export </span><span class="nv">DBT_PROFILES_DIR</span><span class="o">=</span><span class="s2">"path/to/profiles.yml"</span> <span class="c"># Define the DBT_PROFILES_DIR environment variable</span>
   dbt docs generate <span class="nt">--target</span> prod <span class="c"># Build dbt Docs based on the prod schema</span>
</code></pre></div></div>

<p>(3) Start hosting the site</p>

<p>I started hosting the Docs site and detached from the session.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   dbt docs serve <span class="nt">--host</span> 0.0.0.0 <span class="nt">--port</span> 8080 <span class="c"># Specify the host domain and port as parameters</span>
</code></pre></div></div>

<p>(4) Set up the VM Instance</p>

<p>I checked the VM instance’s external IP and added a network tag on the modification page.</p>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/10.webp" alt="" />
<img src="/assets/2024-09-21-dbt-docs-site-hosting/11.webp" alt="" /></p>

<p>(5) Add VPC firewall rules</p>

<p>I went to the firewall policies console and added VPC firewall rules as follows:</p>

<ul>
  <li><strong>Direction</strong>: Ingress</li>
  <li><strong>Source IPv4 Range</strong>: Internal IPv4 range (CIDR format)</li>
  <li><strong>Target Tags</strong>: The network tag added to the VM instance earlier (dbt-docs-serve)</li>
  <li><strong>Protocol and Port</strong>: Port for the dbt Docs hosting (8080)</li>
</ul>

<p>(6) Access address</p>

<p>Now, from within the internal IPv4 range, you can access the site via the following address:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">http://{VM Instance의 External IP}:8080</code></li>
</ul>

<p>(7) In summary, the configured environment is as follows:</p>

<blockquote>
  <p>“Within the internal IPv4 range, you can access the hosted dbt Docs site by connecting to the VM instance’s external IP address on port 8080!”</p>
</blockquote>

<p><img src="/assets/2024-09-21-dbt-docs-site-hosting/12.webp" alt="" /></p>

<hr />

<h1 id="5-conclusion">5. Conclusion</h1>

<p>I pinned the dbt Docs site link in the Slack channel to allow team members to easily access it later. As the company and product continue to grow, the demand for data utilization will increase. By leveraging dbt’s “automated documentation” feature, we can save documentation resources and enhance the efficiency of data-related tasks.</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>

<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (English)" /><category term="Article (Issue Resolution)" /><category term="Level (1. Beginner)" /><category term="Field (Analytics Engineering)" /><category term="Skills (Linux)" /><summary type="html"><![CDATA[“I worked on automating data warehouse documentation using dbt Docs within the company, aiming to improve internal data accessibility and efficiency. Specifically, I utilized dbt’s automated documentation feature to keep dependencies between tables and specifications up to date, thereby improving the accuracy and speed of data usage. I successfully built the system by resolving technical issues, such as hosting dbt Docs on a VM instance and adding firewall settings to allow internal team members to access it within the company’s IP range.”]]></summary></entry><entry><title type="html">구매 전환율 급상승 후기</title><link href="http://localhost:4000/how-we-dramatically-improved-conversion-rates-ko/" rel="alternate" type="text/html" title="구매 전환율 급상승 후기" /><published>2024-08-29T00:00:00+09:00</published><updated>2024-08-29T00:00:00+09:00</updated><id>http://localhost:4000/how-we-dramatically-improved-conversion-rates-ko</id><content type="html" xml:base="http://localhost:4000/how-we-dramatically-improved-conversion-rates-ko/"><![CDATA[<blockquote>
  <p>“외부 요인으로 인해 증가한 신규 방문자 데이터를 분석하여 구매 전환율의 급상승을 달성했습니다. 데이터를 통해 신규 방문자 수와 이들의 구매 의향이 크게 증가했음을 발견했지만, 결제 단계에서 이탈률이 높다는 문제를 파악했습니다. 이에 결제 과정의 불편함이 주요 원인임을 가설로 설정하고, PayPal Express Checkout을 도입하여 사용자 경험을 개선했습니다. 그 결과, 결제 전환율이 32%p 상승하여 이전보다 훨씬 높은 수준을 기록했으며, 이는 지속적으로 유지되고 있습니다. 이를 통해 분석 기반의 문제 해결과 성과 향상을 이뤄냈습니다.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- 전환율 (<code class="language-plaintext highlighter-rouge">add_payment_info</code> → <code class="language-plaintext highlighter-rouge">purchase</code>): 32%p ↑</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="목차">목차</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>2023년, 글로벌 시장 점유율 1위의 경쟁사가 사업적 논란에 휘말리면서 당사는 <strong>예상치 못한 매출 증가</strong>를 경험하게 되었습니다.</li>
  <li>이로 인해 자사몰의 신규 방문자가 급증했으며, 이는 당사 내부 마케팅 활동의 결과가 아닌 외부 시장 변화에 따른 현상으로 파악되었습니다.</li>
  <li>데이터 분석가로서 저는 이러한 비정상적인 시장 움직임을 깊이 있게 분석하기 위해 자발적으로 데이터 모니터링을 했고, 특히 <strong>신규 방문자들의 유입 경로와 구매 행동 패턴</strong>을 집중적으로 추적했습니다.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ul>
  <li>신규 방문자 수가 급증한 상황에서 <strong>결제 프로세스의 이탈률이 높다는 문제</strong>를 발견했습니다.</li>
  <li>구체적으로 구매 퍼널의 각 단계에서 이탈 지점을 분석한 결과, 많은 고객들이 <strong>구매 정보를 입력한 후 결제 단계에서 이탈</strong>하는 것으로 나타났습니다.</li>
  <li>특히, <strong>결제 과정에서의 UX</strong>가 구매 전환에 큰 영향을 미친다는 점을 인지하고, 문제를 명확히 하여 사용자 경험을 개선할 필요가 있었습니다.</li>
  <li>또한, 이번 전환율 저하는 외부 요인에 의한 자연적 유입 사용자 증가와 세그먼트 변화와 관련이 있을 것으로 판단했습니다.</li>
</ul>

<h3 id="actions">Actions</h3>
<ul>
  <li>발견된 문제를 바탕으로 결제 프로세스 개선을 위해 사내 구성원들과 문제를 공유하고, 여러 가지 액션 플랜을 논의했습니다.</li>
  <li>논의 결과, 결제 프로세스에서의 이탈률을 낮추기 위해 우선적으로 <strong>간편 결제 서비스인 PayPal Express Checkout 기능을 도입</strong>하기로 결정했습니다.</li>
  <li>이는 결제 단계를 단축하고 사용자에게 편리한 결제 경험을 제공하여 전환율을 높일 수 있는 가장 현실적이고 효율적인 방안으로 판단되었습니다.</li>
  <li>이후 해당 기능을 적용하여 사용자의 결제 과정에서 불편함을 최소화하고 보안 신뢰도를 높이는 등 UX 개선을 추진했습니다.</li>
</ul>

<h3 id="results">Results</h3>
<ul>
  <li>PayPal Express Checkout 기능 도입 후, 결제 과정에서 이탈하던 문제가 크게 개선되어 <strong><code class="language-plaintext highlighter-rouge">add_payment_info</code>에서 <code class="language-plaintext highlighter-rouge">purchase</code>로 넘어가는 전환율이 이전보다 32%p 상승</strong>했습니다.</li>
  <li>이 조치는 결제 프로세스를 간소화하고 사용자 경험을 향상시켜 전환율을 원상태로 회복시켰을 뿐만 아니라, <strong>현재까지도 높은 수준을 유지</strong>하고 있습니다.</li>
  <li>이 결과는 결제 옵션의 다양화와 간편 결제 도입이 효과적인 전략임을 입증하며, 분석을 바탕으로 한 문제 해결이 매출 성과에 긍정적인 영향을 미쳤습니다.</li>
</ul>

<hr />

<h1 id="2-situation">2. Situation</h1>
<blockquote>
  <ul>
    <li>2023년, 글로벌 시장 점유율 1위의 경쟁사가 사업적 논란에 휘말리면서 당사는 <strong>예상치 못한 매출 증가</strong>를 경험하게 되었습니다.</li>
    <li>이로 인해 자사몰의 신규 방문자가 급증했으며, 이는 당사 내부 마케팅 활동의 결과가 아닌 외부 시장 변화에 따른 현상으로 파악되었습니다.</li>
    <li>데이터 분석가로서 저는 이러한 비정상적인 시장 움직임을 깊이 있게 분석하기 위해 자발적으로 데이터 모니터링을 했고, 특히 <strong>신규 방문자들의 유입 경로와 구매 행동 패턴</strong>을 집중적으로 추적했습니다.</li>
  </ul>
</blockquote>

<h3 id="구체적인-상황">구체적인 상황</h3>
<ul>
  <li>2023년, 글로벌 시장 점유율 TOP1인 모 경쟁사가 사업적 논란에 크게 휩싸이면서 당사가 반사이익 수혜를 입어 자사몰 매출이 급증하고 있었습니다. 이는 내부적인 마케팅 활동의 결과가 아닌, 시장 자체의 외부 영향 덕분이었습니다.</li>
  <li>데이터 분석가였던 저 역시 “<strong>흔치 않은 시장의 흐름으로 인한 이상 현상</strong>“을 깊이 모니터링해보고 싶어 자발적으로 함께 데이터를 팔로업했습니다.</li>
</ul>

<h3 id="데이터-팔로업">데이터 팔로업</h3>

<ol>
  <li>신규 방문자 수가 급증했습니다.
    <details>
<summary>View Query</summary>
<div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span>
      <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
      <span class="k">WHERE</span>
         <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
   <span class="p">),</span>

   <span class="n">CTE_users_min_gsn</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
      <span class="k">FROM</span>
         <span class="n">CTE_raw</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
   <span class="p">)</span>

   <span class="k">SELECT</span>
      <span class="n">event_date</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
   <span class="k">FROM</span>
      <span class="n">CTE_users_min_gsn</span>
   <span class="k">WHERE</span>
      <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
</details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/1.png" alt="" /></p>
  </li>
  <li>이들은 주로 미국과 Organic 트래픽을 통해 유입되었습니다.
    <ul>
      <li>신규 방문자 수 (국가별 분류)
        <details>
 <summary>View Query</summary>
 <div>
            <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">WITH</span>
 <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span>
       <span class="n">geo</span><span class="p">.</span><span class="n">country</span>
    <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
    <span class="k">WHERE</span>
       <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
 <span class="p">),</span>

 <span class="n">CTE_users_min_gsn</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="n">country</span><span class="p">,</span>
       <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
    <span class="k">FROM</span>
       <span class="n">CTE_raw</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
 <span class="p">),</span>

 <span class="n">CTE_top20_countries</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">country</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">2</span> <span class="k">DESC</span>
    <span class="k">LIMIT</span>
       <span class="mi">20</span>
 <span class="p">),</span>

 <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="k">CASE</span>
             <span class="k">WHEN</span> <span class="n">country</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">country</span> <span class="k">FROM</span> <span class="n">CTE_top20_countries</span><span class="p">)</span> <span class="k">THEN</span> <span class="n">country</span>
             <span class="k">ELSE</span> <span class="s1">'(Others)'</span>
       <span class="k">END</span> <span class="k">AS</span> <span class="n">country</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
 <span class="p">)</span>

 <span class="k">SELECT</span>
    <span class="o">*</span>
 <span class="k">FROM</span>
    <span class="n">CTE_result</span>
 <span class="k">ORDER</span> <span class="k">BY</span>
    <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="k">DESC</span>
</code></pre></div>            </div>
          </div>
 </details>
        <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/3.png" alt="" /></p>
      </li>
      <li>신규 방문자 수 (First UTM Parameters별 분류)
        <details>
 <summary>View Query</summary>
 <div>
            <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">WITH</span>
 <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span>
       <span class="n">traffic_source</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">first_campaign</span><span class="p">,</span>
       <span class="n">traffic_source</span><span class="p">.</span><span class="n">medium</span> <span class="k">AS</span> <span class="n">first_medium</span><span class="p">,</span>
       <span class="n">traffic_source</span><span class="p">.</span><span class="k">source</span> <span class="k">AS</span> <span class="n">first_source</span>
    <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
    <span class="k">WHERE</span>
       <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
 <span class="p">),</span>

 <span class="n">CTE_users_min_gsn</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="n">first_campaign</span><span class="p">,</span>
       <span class="n">first_medium</span><span class="p">,</span>
       <span class="n">first_source</span><span class="p">,</span>
       <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
    <span class="k">FROM</span>
       <span class="n">CTE_raw</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span>
 <span class="p">),</span>

 <span class="n">CTE_top20_utms</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_campaign</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_medium</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_source</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">utm</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">2</span> <span class="k">DESC</span>
    <span class="k">LIMIT</span>
       <span class="mi">20</span>
 <span class="p">),</span>

 <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="k">CASE</span>
             <span class="k">WHEN</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_campaign</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_medium</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_source</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">utm</span> <span class="k">FROM</span> <span class="n">CTE_top20_utms</span><span class="p">)</span> <span class="k">THEN</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_campaign</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_medium</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_source</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span>
             <span class="k">ELSE</span> <span class="s1">'(Others)'</span>
       <span class="k">END</span> <span class="k">AS</span> <span class="n">utm</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
 <span class="p">)</span>

 <span class="k">SELECT</span>
    <span class="o">*</span>
 <span class="k">FROM</span>
    <span class="n">CTE_result</span>
 <span class="k">ORDER</span> <span class="k">BY</span>
    <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="k">DESC</span>
</code></pre></div>            </div>
          </div>
 </details>
        <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/4.png" alt="" /></p>
      </li>
    </ul>
  </li>
  <li>신규 방문자들의 구매 의향은 과거에 비해 매우 높은 편이었습니다.
    <details>
<summary>View Query</summary>
<div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span>
         <span class="n">event_name</span>
      <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
      <span class="k">WHERE</span>
         <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
   <span class="p">),</span>

<span class="n">CTE_users</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">event_date</span><span class="p">,</span>
      <span class="n">user_pseudo_id</span><span class="p">,</span>
      <span class="n">event_name</span><span class="p">,</span>
      <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
   <span class="k">FROM</span>
      <span class="n">CTE_raw</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
<span class="p">),</span>

<span class="n">CTE_new_users</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">event_date</span><span class="p">,</span>
      <span class="n">user_pseudo_id</span>
   <span class="k">FROM</span>
      <span class="n">CTE_users</span>
   <span class="k">WHERE</span>
      <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">)</span>

<span class="k">SELECT</span>
   <span class="n">U</span><span class="p">.</span><span class="n">event_date</span><span class="p">,</span>
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">new_users_cnt</span><span class="p">,</span>
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">U</span><span class="p">.</span><span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">new_users_cnt_view_item</span><span class="p">,</span>
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">U</span><span class="p">.</span><span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">new_users_cnt_begin_checkout</span>    
<span class="k">FROM</span>
   <span class="n">CTE_users</span> <span class="n">U</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> 
   <span class="n">CTE_new_users</span> <span class="n">NU</span>
   <span class="k">ON</span> <span class="n">U</span><span class="p">.</span><span class="n">event_date</span> <span class="o">=</span> <span class="n">NU</span><span class="p">.</span><span class="n">event_date</span>
   <span class="k">AND</span> <span class="n">U</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="o">=</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span>
<span class="k">GROUP</span> <span class="k">BY</span>
   <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span>
   <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
</details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/2.png" alt="" /></p>
  </li>
</ol>

<h3 id="문제-발견">문제 발견</h3>

<ol>
  <li>그러나, 배송지+이메일+연락처 등 구매 관련 정보 입력을 완료한 후 결제 프로세스 상에서의 이탈률이 급격히 높아졌습니다.
    <details>
<summary>View Query</summary>
<div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="n">event_name</span>
      <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
      <span class="k">WHERE</span>
         <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
   <span class="p">),</span>

   <span class="n">CTE_funnel</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'add_payment_info'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_users_cnt</span>
      <span class="k">FROM</span>
         <span class="n">CTE_raw</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>

   <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">all_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">view_item_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">purchase_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cvr</span>
      <span class="k">FROM</span>
         <span class="n">CTE_funnel</span>
      <span class="k">ORDER</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">)</span>

   <span class="k">SELECT</span>
      <span class="o">*</span>
   <span class="k">FROM</span>
      <span class="n">CTE_result</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
</details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/5.png" alt="" /></p>

    <ul>
      <li>구매 전환 단계의 주요 이벤트는 다음과 같았습니다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">view_item</code>: 아이템 페이지를 조회한다.</li>
          <li><code class="language-plaintext highlighter-rouge">begin_checkout</code>: 구매를 시작한다.</li>
          <li><code class="language-plaintext highlighter-rouge">add_payment_info</code>: 배송지, 이메일, 연락처 등 구매 관련 정보 입력을 완료한 후 결제 프로세스로 넘어간다.</li>
          <li><code class="language-plaintext highlighter-rouge">purchase</code>: 최종 결제를 완료한 후 Thank You 페이지를 조회한다.</li>
        </ul>
      </li>
      <li>위 네 단계 중, <code class="language-plaintext highlighter-rouge">add_payment_info</code>로부터 <code class="language-plaintext highlighter-rouge">purchase</code>로 넘어가는 지점에서 전환율이 오히려 감소하고 있음을 확인하게 된 것입니다.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="3-tasks">3. Tasks</h1>
<blockquote>
  <ul>
    <li>신규 방문자 수가 급증한 상황에서 <strong>결제 프로세스의 이탈률이 높다는 문제</strong>를 발견했습니다.</li>
    <li>구체적으로 구매 퍼널의 각 단계에서 이탈 지점을 분석한 결과, 많은 고객들이 <strong>구매 정보를 입력한 후 결제 단계에서 이탈</strong>하는 것으로 나타났습니다.</li>
    <li>특히, <strong>결제 과정에서의 UX</strong>가 구매 전환에 큰 영향을 미친다는 점을 인지하고, 문제를 명확히 하여 사용자 경험을 개선할 필요가 있었습니다.</li>
    <li>또한, 이번 전환율 저하는 외부 요인에 의한 자연적 유입 사용자 증가와 세그먼트 변화와 관련이 있을 것으로 판단했습니다.</li>
  </ul>
</blockquote>

<h3 id="문제-구체화">문제 구체화</h3>

<ol>
  <li>결제 프로세스의 UX 개선이 필요했습니다.
    <ul>
      <li>구매 퍼널에서 이탈률이 높은 지점을 분석한 결과, 많은 고객들이 배송지, 이메일, 연락처 등 구매 정보를 입력했음에도 불구하고 결제 프로세스 상에서 크게 이탈하는 것으로 나타났습니다.</li>
      <li><strong>상당히 성가신 구매 정보 입력 과정까지 완료했다면, “구매 의향”이 매우 높은 심리 상태였을 텐데, 상당수가 이탈하고 만 것입니다.</strong></li>
      <li>이는 <strong>구매 의향 자체를 흔들어 놓을 만한 결제 프로세스 불만족</strong>을 느꼈을 가능성이 컸을 것입니다.</li>
    </ul>
  </li>
  <li>구체적으로는 다음 과정에서 이탈률이 매우 높았습니다.
    <ul>
      <li>아래 UI는 <code class="language-plaintext highlighter-rouge">add_payment_info</code> 이벤트 발생 직후 나타나는 PG사의 결제 프로세스입니다.</li>
      <li>이 프로세스 과정에서 결제를 완료하지 못하고 이탈하고 있었던 것입니다.
<img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/6.png" alt="" /></li>
    </ul>
  </li>
  <li>유입 사용자 세그먼트가 변했습니다.
    <ul>
      <li>
        <p>웹사이트 UI에는 변동이 전혀 없었는데도 불구하고 전환율이 갑자기 이전과 괴리된다면 세그먼트의 변동 때문인 것으로 판단했습니다.</p>

        <ul>
          <li>
            <p>그동안 마케팅 유입 활동에 반응하여 방문한 “<strong>인위적 유입</strong>“이 아니라, 이벤에는 시장의 영향으로 인해 Organic하게 방문한 “<strong>자연적 유입</strong>“이 주를 이루었기 때문입니다.
 <img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/4.png" alt="" /></p>
          </li>
          <li>
            <p>구매 의향 자체가 과거에 비해 높은 속성/행동 패턴을 지녔기 때문입니다. (이전보다 확연히 높아진 <strong>아이템 페이지 조회율</strong>)
 <img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/2.png" alt="" /></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="4-actions">4. Actions</h1>
<blockquote>
  <ul>
    <li>발견된 문제를 바탕으로 결제 프로세스 개선을 위해 사내 구성원들과 문제를 공유하고, 여러 가지 액션 플랜을 논의했습니다.</li>
    <li>논의 결과, 결제 프로세스에서의 이탈률을 낮추기 위해 우선적으로 <strong>간편 결제 서비스인 PayPal Express Checkout 기능을 도입</strong>하기로 결정했습니다.</li>
    <li>이는 결제 단계를 단축하고 사용자에게 편리한 결제 경험을 제공하여 전환율을 높일 수 있는 가장 현실적이고 효율적인 방안으로 판단되었습니다.</li>
    <li>이후 해당 기능을 적용하여 사용자의 결제 과정에서 불편함을 최소화하고 보안 신뢰도를 높이는 등 UX 개선을 추진했습니다.</li>
  </ul>
</blockquote>

<h3 id="사내-공유">사내 공유</h3>
<ul>
  <li>문제를 구체화하여 우선 사내 구성원 분들께 해당 내용을 공유 드렸고, 많은 분들께서 이 문제에 대해 공감을 표현해주셨습니다.</li>
  <li>결국, 임원 분들 및 마케팅 팀원 분들과 함께 미팅을 하여 문제를 개선할 만한 <strong>액션 플랜을 논의</strong>하기 시작했습니다.
 <img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/7.png" alt="" /></li>
</ul>

<h3 id="데이터-분석의-한계">데이터 분석의 한계</h3>
<ul>
  <li>안타깝게도, <code class="language-plaintext highlighter-rouge">add_payment_info</code> 이벤트와 <code class="language-plaintext highlighter-rouge">purchase</code> 이벤트 사이에 발생한 사용자 행동까지는 데이터로 확인할 수 없었습니다.
    <ul>
      <li>당사가 사용 중인 이커머스 플랫폼의 Plan 하에서는 소스코드에 GTM 커스텀 이벤트 트리거를 삽입할 수 없었기 때문에 기본적인 GA4 이벤트 수집만 가능했기 때문입니다.</li>
    </ul>
  </li>
  <li>따라서 단순히 데이터만으로는 이 문제의 구체적인 원인을 해명할 수 없었습니다.</li>
  <li><strong>그래서 지금부터는 국내/해외 시장에 대한 안목이 높은 사내 구성원 분들의 직관적 판단이 중요해지기 시작했습니다.</strong></li>
</ul>

<h3 id="가설-설정">가설 설정</h3>

<ol>
  <li>깊은 논의 끝에, 다음과 같은 의견들이 공유되었습니다.
    <ul>
      <li><strong>가설 1</strong>: “결제 수단을 다양화해야 돼요. 잠재 구매 고객이 자신이 원하는 결제 수단을 찾지 못해 이탈했을 가능성이 클 거예요.”</li>
      <li><strong>가설 2</strong>: “간편 결제 서비스를 추가하는 건 어때요? 구매 의향이 줄어들기 전에 빠르게 결제가 마무리될 수 있을 거예요.”</li>
      <li><strong>가설 3</strong>: “가상자산 결제 방식을 지원하는 것도 고려해봐요. 우리 고객들의 특성상 선호도가 높을 것 같거든요.”</li>
      <li><strong>가설 4</strong>: “PG사의 결제 프로세스 UI를 개선해보는 것도 좋을 것 같아요.”</li>
    </ul>
  </li>
  <li>이 중, “<strong>간편 결제 서비스 추가하기</strong>“를 우선적으로 테스트하기로 결정했습니다.
    <ul>
      <li>실행 비용, 시장에 대한 안목 등 측면에서 현실적으로 가장 바람직한 액션이라고 느꼈기 때문입니다.</li>
    </ul>
  </li>
  <li>최종 가설 수립
    <blockquote>
      <p>“<strong>PayPal Express Checkout 기능을 도입하면 결제 프로세스 상에서의 전환율이 높아질 것이다!</strong>”</p>
    </blockquote>
  </li>
</ol>

<h3 id="액션-실행">액션 실행</h3>

<ol>
  <li>
    <p><strong>PayPal Express Checkout</strong>은 고객이 배송지, 이메일, 연락처는 물론, 신용카드 정보 조차도 일일이 입력하지 않은 상태에서, PayPal 로그인을 통해 기존에 저장된 정보를 토대로 빠르게 결제할 수 있는 기능입니다.</p>
  </li>
  <li>사실 당사는 연동된 PG사를 통해 이미 PayPal을 결제 수단을 제공하고 있었지만, 다음과 같은 불편함을 초래하고 있었던 것으로 추측했습니다.
    <ul>
      <li>“여러 가지 옵션 중 하나로만 표시되어 있으므로 눈에 잘 띄지 않았을 것이다.”</li>
      <li>“이미 배송지, 이메일, 연락처 정보를 입력했는데 다시 한 번 PayPal 로그인을 유도하는 것이 불필요한 시간 낭비로 느껴졌을 것이다.”
<img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/6.png" alt="" /></li>
    </ul>
  </li>
  <li>따라서 PayPal Express Checkout 기능을 다음의 측면에서 UX 향상 방법이라고 생각하게 되었습니다.
    <ul>
      <li><strong>고객의 구매 전환 단계를 단축하여 간편한 결제를 지원한다.</strong></li>
      <li><strong>개인정보를 일일이 입력하지 않아도 되므로, 보안에 대한 신뢰도를 높인다.</strong>
<img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/8.png" alt="" /></li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="5-results">5. Results</h1>
<blockquote>
  <ul>
    <li>PayPal Express Checkout 기능 도입 후, 결제 과정에서 이탈하던 문제가 크게 개선되어 <strong><code class="language-plaintext highlighter-rouge">add_payment_info</code>에서 <code class="language-plaintext highlighter-rouge">purchase</code>로 넘어가는 전환율이 이전보다 32%p 상승</strong>했습니다.</li>
    <li>이 조치는 결제 프로세스를 간소화하고 사용자 경험을 향상시켜 전환율을 원상태로 회복시켰을 뿐만 아니라, <strong>현재까지도 높은 수준을 유지</strong>하고 있습니다.</li>
    <li>이 결과는 결제 옵션의 다양화와 간편 결제 도입이 효과적인 전략임을 입증하며, 분석을 바탕으로 한 문제 해결이 매출 성과에 긍정적인 영향을 미쳤습니다.</li>
  </ul>
</blockquote>

<h3 id="결과">결과</h3>

<ul>
  <li>해당 액션을 실행한 후, <strong><code class="language-plaintext highlighter-rouge">add_payment_info</code>로부터 <code class="language-plaintext highlighter-rouge">purchase</code>로 넘어가는 지점의 전환율은 원상태로 회복되었을 뿐만 아니라 이전보다 훨씬 높은 수준을 기록했습니다.</strong></li>
  <li>2023년 8월말 현재까지도 여전히 높은 전환율 수준을 유지하고 있습니다.
    <details>
 <summary>View Query</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">WITH</span>
    <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="n">user_pseudo_id</span><span class="p">,</span>
          <span class="n">event_name</span>
       <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
       <span class="k">WHERE</span>
          <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
    <span class="p">),</span>

    <span class="n">CTE_funnel</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'add_payment_info'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_users_cnt</span>
       <span class="k">FROM</span>
          <span class="n">CTE_raw</span>
       <span class="k">GROUP</span> <span class="k">BY</span>
          <span class="mi">1</span>
    <span class="p">),</span>

    <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">all_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">view_item_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">purchase_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cvr</span>
       <span class="k">FROM</span>
          <span class="n">CTE_funnel</span>
       <span class="k">ORDER</span> <span class="k">BY</span>
          <span class="mi">1</span>
    <span class="p">)</span>

    <span class="k">SELECT</span>
       <span class="o">*</span>
    <span class="k">FROM</span>
       <span class="n">CTE_result</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
 </details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/9.png" alt="" /></p>
  </li>
</ul>

<h3 id="효과">효과</h3>

<ul>
  <li>해당 액션을 실행한 후, <strong><code class="language-plaintext highlighter-rouge">add_payment_info</code>로부터 <code class="language-plaintext highlighter-rouge">purchase</code>로 넘어가는 지점의 전환율은 기존에 비해 32%p 상승했습니다.</strong>
    <details>
 <summary>View Query</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">WITH</span>
    <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="n">user_pseudo_id</span><span class="p">,</span>
          <span class="n">event_name</span>
       <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
       <span class="k">WHERE</span>
          <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
    <span class="p">),</span>

    <span class="n">CTE_funnel</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="k">CASE</span>
                <span class="k">WHEN</span> <span class="n">event_date</span> <span class="o">&lt;=</span> <span class="s1">'YYYY-MM-DD'</span> <span class="k">THEN</span> <span class="s1">'AS-IS'</span>
                <span class="k">ELSE</span> <span class="s1">'TO-BE'</span>
          <span class="k">END</span> <span class="k">AS</span> <span class="n">period</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'add_payment_info'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_users_cnt</span>
       <span class="k">FROM</span>
          <span class="n">CTE_raw</span>
       <span class="k">GROUP</span> <span class="k">BY</span>
          <span class="mi">1</span>
    <span class="p">),</span>

    <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">period</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">purchase_users_cnt</span><span class="p">,</span> <span class="n">add_payment_info_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cvr</span>
       <span class="k">FROM</span>
          <span class="n">CTE_funnel</span>
    <span class="p">)</span>

    <span class="k">SELECT</span>
       <span class="o">*</span>
    <span class="k">FROM</span>
       <span class="n">CTE_result</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
 </details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/10.png" alt="" /></p>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>

<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (Korean)" /><category term="Article (Project)" /><category term="Level (1. Beginner)" /><category term="Field (Data Analysis)" /><category term="Skills (SQL)" /><summary type="html"><![CDATA[“외부 요인으로 인해 증가한 신규 방문자 데이터를 분석하여 구매 전환율의 급상승을 달성했습니다. 데이터를 통해 신규 방문자 수와 이들의 구매 의향이 크게 증가했음을 발견했지만, 결제 단계에서 이탈률이 높다는 문제를 파악했습니다. 이에 결제 과정의 불편함이 주요 원인임을 가설로 설정하고, PayPal Express Checkout을 도입하여 사용자 경험을 개선했습니다. 그 결과, 결제 전환율이 32%p 상승하여 이전보다 훨씬 높은 수준을 기록했으며, 이는 지속적으로 유지되고 있습니다. 이를 통해 분석 기반의 문제 해결과 성과 향상을 이뤄냈습니다.”]]></summary></entry><entry><title type="html">Dramatic Increase in E-commerce Conversion Rates</title><link href="http://localhost:4000/how-we-dramatically-improved-conversion-rates-en/" rel="alternate" type="text/html" title="Dramatic Increase in E-commerce Conversion Rates" /><published>2024-08-29T00:00:00+09:00</published><updated>2024-08-29T00:00:00+09:00</updated><id>http://localhost:4000/how-we-dramatically-improved-conversion-rates-en</id><content type="html" xml:base="http://localhost:4000/how-we-dramatically-improved-conversion-rates-en/"><![CDATA[<blockquote>
  <p>“By analyzing the data of new visitors that increased due to external factors, I achieved a significant rise in purchase conversion rates. The data revealed a substantial increase in the number of new visitors and their purchasing intent, but also identified a high dropout rate at the payment stage. Based on the hypothesis that the inconvenience in the payment process was the main cause, I introduced PayPal Express Checkout to enhance user experience. As a result, the payment conversion rate increased by 32%p, reaching a much higher level than before, and this improvement has been sustained. This demonstrates effective problem-solving and performance enhancement based on data analysis.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- Conversion Rate (<code class="language-plaintext highlighter-rouge">add_payment_info</code> → <code class="language-plaintext highlighter-rouge">purchase</code>): 32%p ↑</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="table-of-contents">Table of Contents</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>In 2023, our company experienced <strong>an unexpected increase in sales</strong> due to a major competitor, who holds the largest market share globally, becoming embroiled in business controversy.</li>
  <li>As a result, there was a surge in new visitors to our online store, which was identified as a phenomenon driven by changes in the external market, rather than the outcome of our internal marketing efforts.</li>
  <li>As a data analyst, I proactively monitored the data to deeply analyze these unusual market movements, focusing particularly on <strong>the acquisition channels and purchasing behavior patterns of new visitors.</strong></li>
</ul>

<h3 id="tasks">Tasks</h3>
<ul>
  <li>In the context of a surge in new visitors, I discovered <strong>a high dropout rate in the payment process.</strong></li>
  <li>A detailed analysis of the dropout points at each stage of the purchase funnel revealed that many customers were <strong>abandoning their processes after entering their payment information.</strong></li>
  <li>Recognizing that <strong>UX in the payment process</strong> significantly affects purchase conversion, I identified a need to improve the user experience by clearly defining the problem.</li>
  <li>Additionally, I concluded that the decline in conversion rates might be related to the natural increase in organic user acquisition due to external factors and changes in user segments.</li>
</ul>

<h3 id="actions">Actions</h3>
<ul>
  <li>Based on the identified problem, I shared it with internal stakeholders and discussed several action plans to improve the payment process.</li>
  <li>As a result of the discussions, we decided to <strong>first introduce the easy payment service, PayPal Express Checkout</strong>, to reduce the dropout rate in the payment process.</li>
  <li>This was deemed the most realistic and effective solution to streamline the payment steps and provide a convenient payment experience to users, thereby increasing conversion rates.</li>
  <li>After implementing this feature, I focused on minimizing user discomfort during the payment process and enhancing security trustworthiness, thereby improving UX.</li>
</ul>

<h3 id="results">Results</h3>
<ul>
  <li>After introducing the PayPal Express Checkout feature, the dropout issue during the payment process significantly improved, and <strong>the conversion rate from <code class="language-plaintext highlighter-rouge">add_payment_info</code> to <code class="language-plaintext highlighter-rouge">purchase</code> increased by 32 percentage points compared to before.</strong></li>
  <li>This action not only restored the conversion rate to its original level by simplifying the payment process and improving the user experience but <strong>also maintained a high level to this day</strong>.</li>
  <li>This result demonstrates that diversifying payment options and introducing easy payment methods are effective strategies, showing that problem-solving based on data analysis has had a positive impact on sales performance.</li>
</ul>

<hr />

<h1 id="2-situation">2. Situation</h1>
<blockquote>
  <ul>
    <li>In 2023, our company experienced <strong>an unexpected increase in sales</strong> due to a major competitor, who holds the largest market share globally, becoming embroiled in business controversy.</li>
    <li>As a result, there was a surge in new visitors to our online store, which was identified as a phenomenon driven by changes in the external market, rather than the outcome of our internal marketing efforts.</li>
    <li>As a data analyst, I proactively monitored the data to deeply analyze these unusual market movements, focusing particularly on <strong>the acquisition channels and purchasing behavior patterns of new visitors.</strong></li>
  </ul>
</blockquote>

<h3 id="detailed-situation">Detailed Situation</h3>
<ul>
  <li>In 2023, a competitor with the top market share globally became heavily embroiled in business controversy, resulting in a windfall for our company, with a significant increase in sales on our own website. This was due to external market influences rather than the results of our internal marketing efforts.</li>
  <li>As a data analyst, I also wanted to deeply monitor and follow up on this “<strong>abnormal phenomenon caused by unusual market flows.</strong>”</li>
</ul>

<h3 id="data-follow-up">Data Follow-up</h3>

<ol>
  <li>The number of new visitors surged.
    <details>
<summary>View Query</summary>
<div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span>
      <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
      <span class="k">WHERE</span>
         <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
   <span class="p">),</span>

   <span class="n">CTE_users_min_gsn</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
      <span class="k">FROM</span>
         <span class="n">CTE_raw</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
   <span class="p">)</span>

   <span class="k">SELECT</span>
      <span class="n">event_date</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
   <span class="k">FROM</span>
      <span class="n">CTE_users_min_gsn</span>
   <span class="k">WHERE</span>
      <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
</details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/1.png" alt="" /></p>
  </li>
  <li>These visitors primarily entered through organic traffic and from the United States.
    <ul>
      <li>Number of New Users (by Country)
        <details>
 <summary>View Query</summary>
 <div>
            <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">WITH</span>
 <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span>
       <span class="n">geo</span><span class="p">.</span><span class="n">country</span>
    <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
    <span class="k">WHERE</span>
       <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
 <span class="p">),</span>

 <span class="n">CTE_users_min_gsn</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="n">country</span><span class="p">,</span>
       <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
    <span class="k">FROM</span>
       <span class="n">CTE_raw</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
 <span class="p">),</span>

 <span class="n">CTE_top20_countries</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">country</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">2</span> <span class="k">DESC</span>
    <span class="k">LIMIT</span>
       <span class="mi">20</span>
 <span class="p">),</span>

 <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="k">CASE</span>
             <span class="k">WHEN</span> <span class="n">country</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">country</span> <span class="k">FROM</span> <span class="n">CTE_top20_countries</span><span class="p">)</span> <span class="k">THEN</span> <span class="n">country</span>
             <span class="k">ELSE</span> <span class="s1">'(Others)'</span>
       <span class="k">END</span> <span class="k">AS</span> <span class="n">country</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
 <span class="p">)</span>

 <span class="k">SELECT</span>
    <span class="o">*</span>
 <span class="k">FROM</span>
    <span class="n">CTE_result</span>
 <span class="k">ORDER</span> <span class="k">BY</span>
    <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="k">DESC</span>
</code></pre></div>            </div>
          </div>
 </details>
        <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/3.png" alt="" /></p>
      </li>
      <li>Number of New Users (by First UTM Parameters)
        <details>
 <summary>View Query</summary>
 <div>
            <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">WITH</span>
 <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span>
       <span class="n">traffic_source</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">first_campaign</span><span class="p">,</span>
       <span class="n">traffic_source</span><span class="p">.</span><span class="n">medium</span> <span class="k">AS</span> <span class="n">first_medium</span><span class="p">,</span>
       <span class="n">traffic_source</span><span class="p">.</span><span class="k">source</span> <span class="k">AS</span> <span class="n">first_source</span>
    <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
    <span class="k">WHERE</span>
       <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
 <span class="p">),</span>

 <span class="n">CTE_users_min_gsn</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="n">user_pseudo_id</span><span class="p">,</span>
       <span class="n">first_campaign</span><span class="p">,</span>
       <span class="n">first_medium</span><span class="p">,</span>
       <span class="n">first_source</span><span class="p">,</span>
       <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
    <span class="k">FROM</span>
       <span class="n">CTE_raw</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span>
 <span class="p">),</span>

 <span class="n">CTE_top20_utms</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_campaign</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_medium</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_source</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">utm</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">2</span> <span class="k">DESC</span>
    <span class="k">LIMIT</span>
       <span class="mi">20</span>
 <span class="p">),</span>

 <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
       <span class="n">event_date</span><span class="p">,</span>
       <span class="k">CASE</span>
             <span class="k">WHEN</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_campaign</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_medium</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_source</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">utm</span> <span class="k">FROM</span> <span class="n">CTE_top20_utms</span><span class="p">)</span> <span class="k">THEN</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_campaign</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_medium</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span> <span class="o">||</span> <span class="s1">' &gt; '</span> <span class="o">||</span> <span class="n">COALESCE</span><span class="p">(</span><span class="n">first_source</span><span class="p">,</span> <span class="s1">'(Unknown)'</span><span class="p">)</span>
             <span class="k">ELSE</span> <span class="s1">'(Others)'</span>
       <span class="k">END</span> <span class="k">AS</span> <span class="n">utm</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
       <span class="n">CTE_users_min_gsn</span>
    <span class="k">WHERE</span>
       <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
 <span class="p">)</span>

 <span class="k">SELECT</span>
    <span class="o">*</span>
 <span class="k">FROM</span>
    <span class="n">CTE_result</span>
 <span class="k">ORDER</span> <span class="k">BY</span>
    <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="k">DESC</span>
</code></pre></div>            </div>
          </div>
 </details>
        <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/4.png" alt="" /></p>
      </li>
    </ul>
  </li>
  <li>The purchasing intent of new visitors was significantly higher than in the past.
    <details>
<summary>View Query</summary>
<div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="p">(</span><span class="k">SELECT</span> <span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">FROM</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span>
         <span class="n">event_name</span>
      <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
      <span class="k">WHERE</span>
         <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
   <span class="p">),</span>

<span class="n">CTE_users</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">event_date</span><span class="p">,</span>
      <span class="n">user_pseudo_id</span><span class="p">,</span>
      <span class="n">event_name</span><span class="p">,</span>
      <span class="k">MIN</span><span class="p">(</span><span class="n">ga_session_number</span><span class="p">)</span> <span class="k">AS</span> <span class="n">min_gsn</span>
   <span class="k">FROM</span>
      <span class="n">CTE_raw</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
<span class="p">),</span>

<span class="n">CTE_new_users</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">event_date</span><span class="p">,</span>
      <span class="n">user_pseudo_id</span>
   <span class="k">FROM</span>
      <span class="n">CTE_users</span>
   <span class="k">WHERE</span>
      <span class="n">min_gsn</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">)</span>

<span class="k">SELECT</span>
   <span class="n">U</span><span class="p">.</span><span class="n">event_date</span><span class="p">,</span>
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">new_users_cnt</span><span class="p">,</span>
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">U</span><span class="p">.</span><span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">new_users_cnt_view_item</span><span class="p">,</span>
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">U</span><span class="p">.</span><span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">new_users_cnt_begin_checkout</span>    
<span class="k">FROM</span>
   <span class="n">CTE_users</span> <span class="n">U</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> 
   <span class="n">CTE_new_users</span> <span class="n">NU</span>
   <span class="k">ON</span> <span class="n">U</span><span class="p">.</span><span class="n">event_date</span> <span class="o">=</span> <span class="n">NU</span><span class="p">.</span><span class="n">event_date</span>
   <span class="k">AND</span> <span class="n">U</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="o">=</span> <span class="n">NU</span><span class="p">.</span><span class="n">user_pseudo_id</span>
<span class="k">GROUP</span> <span class="k">BY</span>
   <span class="mi">1</span>
<span class="k">ORDER</span> <span class="k">BY</span>
   <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
</details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/2.png" alt="" /></p>
  </li>
</ol>

<h3 id="problem-discovery">Problem Discovery</h3>

<ol>
  <li>However, there was a sharp increase in dropout rates in the payment process after completing the purchase-related information such as shipping address, email, and contact information.
    <details>
<summary>View Query</summary>
<div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">user_pseudo_id</span><span class="p">,</span>
         <span class="n">event_name</span>
      <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
      <span class="k">WHERE</span>
         <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
   <span class="p">),</span>

   <span class="n">CTE_funnel</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'add_payment_info'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_users_cnt</span>
      <span class="k">FROM</span>
         <span class="n">CTE_raw</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>

   <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">event_date</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">all_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">view_item_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_cvr</span><span class="p">,</span>
         <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">purchase_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cvr</span>
      <span class="k">FROM</span>
         <span class="n">CTE_funnel</span>
      <span class="k">ORDER</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">)</span>

   <span class="k">SELECT</span>
      <span class="o">*</span>
   <span class="k">FROM</span>
      <span class="n">CTE_result</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
</details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/5.png" alt="" /></p>

    <ul>
      <li>The major events in the purchase conversion stages were as follows:
        <ul>
          <li><code class="language-plaintext highlighter-rouge">view_item</code>: Viewing the item page.</li>
          <li><code class="language-plaintext highlighter-rouge">begin_checkout</code>: Starting the purchase process.</li>
          <li><code class="language-plaintext highlighter-rouge">add_payment_info</code>: Completing the entry of purchase-related information such as shipping address, email, and contact information, the nproceeding to the payment process.</li>
          <li><code class="language-plaintext highlighter-rouge">purchase</code>: Completing the final payment and vewing the Thank you page.</li>
        </ul>
      </li>
      <li>Among these four stages, it was confirmed that there was a drop in conversion rates at the point of moving from <code class="language-plaintext highlighter-rouge">add_payment_info</code> to <code class="language-plaintext highlighter-rouge">purchase</code>.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="3-tasks">3. Tasks</h1>
<blockquote>
  <ul>
    <li>In the context of a surge in new visitors, I discovered <strong>a high dropout rate in the payment process.</strong></li>
    <li>A detailed analysis of the dropout points at each stage of the purchase funnel revealed that many customers were <strong>abandoning their processes after entering their payment information.</strong></li>
    <li>Recognizing that <strong>UX in the payment process</strong> significantly affects purchase conversion, I identified a need to improve the user experience by clearly defining the problem.</li>
    <li>Additionally, I concluded that the decline in conversion rates might be related to the natural increase in organic user acquisition due to external factors and changes in user segments.</li>
  </ul>
</blockquote>

<h3 id="clarifying-the-problem">Clarifying the Problem</h3>

<ol>
  <li>There was a need to improve the UX of the payment process.
    <ul>
      <li>An analysis of the points with high dropout rates in the purchase funnel revealed that many customers were abandoning their carts in the payment process, even after completing the entry of purchase-related information such as shipping address, email, and contact information.</li>
      <li><strong>Given that they had completed such a cumbersome process of entering purchase information, they must have been in a state of “high purchase intent,” yet a significant number still abandoned their carts.</strong></li>
      <li>This suggested a high possibility that <strong>the dissatisfaction with the payment process was strong enough to undermine the purchase intent itself.</strong></li>
    </ul>
  </li>
  <li>Specifically, the dropout rate was very high at the following stage:
    <ul>
      <li>The UI below appears right after the <code class="language-plaintext highlighter-rouge">add_payment_info</code> event occurs during the payment process by the payment gateway provider.</li>
      <li>Users were not completing the payment and abandoning their carts during this process.
<img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/6.png" alt="" /></li>
    </ul>
  </li>
  <li>The user segments of incoming visitors had changed.
    <ul>
      <li>
        <p>If the conversion rate suddenly diverges from the past without any changes to the website UI, it was determined that this was due to changes in user segments.</p>

        <ul>
          <li>
            <p>This was because it was primarily “<strong>natural inflow</strong>” caused by market influences, rather than the “<strong>artificial inflow</strong>” that previously visited in response to marketing activities.
 <img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/4.png" alt="" /></p>
          </li>
          <li>
            <p>It was due to the nature/behavior pattern with high purchase intent compared to the past (significantly increased <strong>item page view rate</strong> compared to before).
 <img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/2.png" alt="" /></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="4-actions">4. Actions</h1>
<blockquote>
  <ul>
    <li>Based on the identified problem, I shared it with internal stakeholders and discussed several action plans to improve the payment process.</li>
    <li>As a result of the discussions, we decided to <strong>first introduce the easy payment service, PayPal Express Checkout</strong>, to reduce the dropout rate in the payment process.</li>
    <li>This was deemed the most realistic and effective solution to streamline the payment steps and provide a convenient payment experience to users, thereby increasing conversion rates.</li>
    <li>After implementing this feature, I focused on minimizing user discomfort during the payment process and enhancing security trustworthiness, thereby improving UX.</li>
  </ul>
</blockquote>

<h3 id="internal-sharing">Internal Sharing</h3>
<ul>
  <li>I clarified the problem and shared the details with internal stakeholders, and many expressed agreement with the issue.</li>
  <li>Eventually, I held a meeting with executives and marketing team members to <strong>discuss possible action plans</strong> to address the issue.
 <img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/7-eng.png" alt="" /></li>
</ul>

<h3 id="limitations-of-data-analysis">Limitations of Data Analysis</h3>
<ul>
  <li>Unfortunately, the user behavior that occurred between the <code class="language-plaintext highlighter-rouge">add_payment_info</code> event and the <code class="language-plaintext highlighter-rouge">purchase</code> event could not be confirmed through the data.
    <ul>
      <li>This was because, under the plan for the e-commerce platform we were using, only basic GA4 event collection was possible as we couldn’t insert GTM custom event triggers into the source code.</li>
    </ul>
  </li>
  <li>Therefore, it was not possible to explain the specific cause of this problem solely with data.</li>
  <li><strong>Therefore, moving forward, the intuitive judgment of internal stakeholders with insight into domestic and overseas markets became important.</strong></li>
</ul>

<h3 id="hypothesis-establishment">Hypothesis Establishment</h3>

<ol>
  <li>After deep discussions, the following opinions were shared:
    <ul>
      <li><strong>Hypothesis 1</strong>: “We need to diversify payment methods. Potential customers might have abandoned their carts because they couldn’t find their preferred payment method.”</li>
      <li><strong>Hypothesis 2</strong>: “How about adding an easy payment service? It could quickly complete the payment before the purchase intent declines.”</li>
      <li><strong>Hypothesis 3</strong>: “Consider supporting cryptocurrency payment methods. Given the characteristics of our customers, it could be highly preferred.”</li>
      <li><strong>Hypothesis 4</strong>: “Improving the UI of the payment gateway’s payment process might also be a good idea.”</li>
    </ul>
  </li>
  <li>Among these, we decided to first test “<strong>adding an easy payment service</strong>”.
    <ul>
      <li>This was considered the most feasible action in terms of implementation costs, market insights, etc.</li>
    </ul>
  </li>
  <li>Final Hypothesis Establishment
    <blockquote>
      <p>“<strong>Introducing the PayPal Express Checkout feature will increase the conversion rate in the payment process!</strong>”</p>
    </blockquote>
  </li>
</ol>

<h3 id="action-implementation">Action Implementation</h3>

<ol>
  <li>
    <p><strong>PayPal Express Checkout</strong> is a feature that allows customers to quickly complete a payment using information already stored through PayPal login, without needing to individually enter their shipping address, email, contact information, or even credit card details.</p>
  </li>
  <li>In fact, our company had already offered PayPal as a payment method through the linked payment gateway, but it was suspected that this caused the following inconveniences:
    <ul>
      <li>“It was only displayed as one of several options, so it might not have been easily noticeable.”</li>
      <li>“After entering shipping, email, and contact information, prompting for PayPal login again might have been perceived as an unnecessary waste of time.”
<img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/6.png" alt="" /></li>
    </ul>
  </li>
  <li>Therefore, the PayPal Express Checkout feature was considered a UX improvement method for the following reasons:
    <ul>
      <li><strong>It supports easy payments by shortening the customer’s purchase conversion steps.</strong></li>
      <li><strong>It enhances trust in security by eliminating the need to enter personal information individually.</strong>
<img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/8.png" alt="" /></li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="5-results">5. Results</h1>
<blockquote>
  <ul>
    <li>After introducing the PayPal Express Checkout feature, the dropout issue during the payment process significantly improved, and <strong>the conversion rate from <code class="language-plaintext highlighter-rouge">add_payment_info</code> to <code class="language-plaintext highlighter-rouge">purchase</code> increased by 32 percentage points compared to before.</strong></li>
    <li>This action not only restored the conversion rate to its original level by simplifying the payment process and improving the user experience but <strong>also maintained a high level to this day</strong>.</li>
    <li>This result demonstrates that diversifying payment options and introducing easy payment methods are effective strategies, showing that problem-solving based on data analysis has had a positive impact on sales performance.</li>
  </ul>
</blockquote>

<h3 id="results-1">Results</h3>

<ul>
  <li>After executing the action, <strong>the conversion rate at the point of moving from <code class="language-plaintext highlighter-rouge">add_payment_info</code> to <code class="language-plaintext highlighter-rouge">purchase</code> not only recovered to its original state but also reached a much higher level than before.</strong></li>
  <li>As of the end of August 2023, it continues to maintain a high conversion rate.
    <details>
 <summary>View Query</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">WITH</span>
    <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="n">user_pseudo_id</span><span class="p">,</span>
          <span class="n">event_name</span>
       <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
       <span class="k">WHERE</span>
          <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
    <span class="p">),</span>

    <span class="n">CTE_funnel</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'add_payment_info'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_users_cnt</span>
       <span class="k">FROM</span>
          <span class="n">CTE_raw</span>
       <span class="k">GROUP</span> <span class="k">BY</span>
          <span class="mi">1</span>
    <span class="p">),</span>

    <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">all_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">view_item_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_cvr</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">purchase_users_cnt</span><span class="p">,</span> <span class="n">all_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cvr</span>
       <span class="k">FROM</span>
          <span class="n">CTE_funnel</span>
       <span class="k">ORDER</span> <span class="k">BY</span>
          <span class="mi">1</span>
    <span class="p">)</span>

    <span class="k">SELECT</span>
       <span class="o">*</span>
    <span class="k">FROM</span>
       <span class="n">CTE_result</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
 </details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/9.png" alt="" /></p>
  </li>
</ul>

<h3 id="impact">Impact</h3>

<ul>
  <li>After implementing the action, <strong>the conversion rate at the point of moving from <code class="language-plaintext highlighter-rouge">add_payment_info</code> to <code class="language-plaintext highlighter-rouge">purchase</code> increased by 32 percentage points compared to before.</strong>
    <details>
 <summary>View Query</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">WITH</span>
    <span class="n">CTE_raw</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">event_date</span><span class="p">,</span>
          <span class="n">user_pseudo_id</span><span class="p">,</span>
          <span class="n">event_name</span>
       <span class="k">FROM</span> <span class="nv">`project_id.dataset_id.events_*`</span>
       <span class="k">WHERE</span>
          <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'START DATE'</span><span class="p">)</span> <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'END DATE'</span><span class="p">)</span>
    <span class="p">),</span>

    <span class="n">CTE_funnel</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="k">CASE</span>
                <span class="k">WHEN</span> <span class="n">event_date</span> <span class="o">&lt;=</span> <span class="s1">'YYYY-MM-DD'</span> <span class="k">THEN</span> <span class="s1">'AS-IS'</span>
                <span class="k">ELSE</span> <span class="s1">'TO-BE'</span>
          <span class="k">END</span> <span class="k">AS</span> <span class="n">period</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">all_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'view_item'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">view_item_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'begin_checkout'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">begin_checkout_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'add_payment_info'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">add_payment_info_users_cnt</span><span class="p">,</span>
          <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="n">user_pseudo_id</span> <span class="k">END</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_users_cnt</span>
       <span class="k">FROM</span>
          <span class="n">CTE_raw</span>
       <span class="k">GROUP</span> <span class="k">BY</span>
          <span class="mi">1</span>
    <span class="p">),</span>

    <span class="n">CTE_result</span> <span class="k">AS</span> <span class="p">(</span>
       <span class="k">SELECT</span>
          <span class="n">period</span><span class="p">,</span>
          <span class="n">SAFE_DIVIDE</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">purchase_users_cnt</span><span class="p">,</span> <span class="n">add_payment_info_users_cnt</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cvr</span>
       <span class="k">FROM</span>
          <span class="n">CTE_funnel</span>
    <span class="p">)</span>

    <span class="k">SELECT</span>
       <span class="o">*</span>
    <span class="k">FROM</span>
       <span class="n">CTE_result</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
       <span class="mi">1</span>
</code></pre></div>        </div>
      </div>
 </details>
    <p><img src="/assets/2024-08-29-how-we-dramatically-improved-conversion-rates/10.png" alt="" /></p>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>

<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (English)" /><category term="Article (Project)" /><category term="Level (1. Beginner)" /><category term="Field (Data Analysis)" /><category term="Skills (SQL)" /><summary type="html"><![CDATA[“By analyzing the data of new visitors that increased due to external factors, I achieved a significant rise in purchase conversion rates. The data revealed a substantial increase in the number of new visitors and their purchasing intent, but also identified a high dropout rate at the payment stage. Based on the hypothesis that the inconvenience in the payment process was the main cause, I introduced PayPal Express Checkout to enhance user experience. As a result, the payment conversion rate increased by 32%p, reaching a much higher level than before, and this improvement has been sustained. This demonstrates effective problem-solving and performance enhancement based on data analysis.”]]></summary></entry><entry><title type="html">Query Optimization by Using JOIN Instead of NOT IN</title><link href="http://localhost:4000/join-instead-of-not-in-en/" rel="alternate" type="text/html" title="Query Optimization by Using JOIN Instead of NOT IN" /><published>2024-08-13T00:00:00+09:00</published><updated>2024-08-13T00:00:00+09:00</updated><id>http://localhost:4000/join-instead-of-not-in-en</id><content type="html" xml:base="http://localhost:4000/join-instead-of-not-in-en/"><![CDATA[<blockquote>
  <p>“In this project, I optimized the incremental update strategy for the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table to address query performance issues in our Enterprise Data Warehouse (EDW) environment. By replacing the inefficient <code class="language-plaintext highlighter-rouge">NOT IN</code> clause with a <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>, I streamlined the duplicate data check process, reducing the overall orchestration time from 50 minutes to 2 minutes. This resulted in approximately a 96% performance improvement, significantly enhancing data processing efficiency and system resource utilization, thereby strengthening service stability and scalability.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- Orchestration Time: <code class="language-plaintext highlighter-rouge">50 mins</code> → <code class="language-plaintext highlighter-rouge">2 mins</code> (96% ↓)</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="table-of-contents">Table of Contents</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>In our Enterprise Data Warehouse (EDW), <strong>the orchestration process of the ELT pipeline was taking significantly longer than expected.</strong> Specifically, there were performance issues during the update process of the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ul>
  <li>The goal was to optimize the incremental strategy of the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table to <strong>reduce the overall orchestration time</strong>. This would enable us to handle increasing data traffic more efficiently and enhance service reliability.</li>
</ul>

<h3 id="actions">Actions</h3>
<ul>
  <li>I <strong>replaced the <code class="language-plaintext highlighter-rouge">NOT IN</code> clause with a <code class="language-plaintext highlighter-rouge">LEFT JOIN</code></strong> to effectively filter duplicate data while optimizing performance.</li>
</ul>

<h3 id="results">Results</h3>
<ul>
  <li>Through query optimization, the total orchestration time was <strong>reduced from 50 minutes to 2 minutes</strong>, achieving approximately <strong>96% performance improvement</strong> and significantly enhancing data processing efficiency.</li>
</ul>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <ul>
    <li>In our Enterprise Data Warehouse (EDW), <strong>the orchestration process of the ELT pipeline was taking significantly longer than expected.</strong> Specifically, there were performance issues during the update process of the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table.</li>
  </ul>
</blockquote>

<p><img src="/assets/2024-08-13-join-instead-of-not-in/1.webp" alt="" /></p>

<h3 id="specific-situation">Specific Situation</h3>
<ul>
  <li>Our company operates an Enterprise Data Warehouse (EDW) environment to provide B2B BI services. Every midnight, a complex data transformation process based on user event data is performed. <strong>However, this process was taking longer than expected.</strong> In particular, <strong>the incremental update process of the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table, a key event table</strong>, was taking up most of the orchestration time. This delay in data refresh posed a risk of negatively impacting service quality.</li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>

<blockquote>
  <ul>
    <li>The goal was to optimize the incremental strategy of the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table to <strong>reduce the overall orchestration time</strong>. This would enable us to handle increasing data traffic more efficiently and enhance service reliability.</li>
  </ul>
</blockquote>

<h3 id="root-causes-of-the-problem">Root Causes of the Problem</h3>
<ul>
  <li>I identified three major issues in the update process of the <code class="language-plaintext highlighter-rouge">core_fct_events</code> table.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">WITH</span>
    <span class="n">CTE_src_events</span> <span class="k">AS</span> <span class="p">(</span>
        <span class="k">SELECT</span>
            <span class="k">DISTINCT</span>
            <span class="nb">datetime</span><span class="p">,</span>
            <span class="n">app_id</span><span class="p">,</span>
            <span class="n">user_id</span><span class="p">,</span>
            <span class="n">event_name</span>
        <span class="k">FROM</span>
            <span class="n">src_events</span>
        <span class="c1">-- Incremental Strategy: Read rows with a datetime greater than the maximum datetime currently stored in the table.</span>
        <span class="p">{</span><span class="o">%</span> <span class="n">if</span> <span class="n">is_incremental</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
        <span class="k">WHERE</span>
            <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="nb">datetime</span><span class="p">)</span> <span class="k">FROM</span> <span class="p">{{</span> <span class="n">this</span> <span class="p">}})</span> <span class="o">&lt;</span> <span class="nb">datetime</span>
        <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
    <span class="p">)</span>
    <span class="k">SELECT</span>
        <span class="o">*</span>
    <span class="k">FROM</span>
        <span class="n">CTE_src_events</span>
    <span class="c1">-- Incremental Strategy: Exclude data that already exists in the table. Do not insert those rows.</span>
    <span class="p">{</span><span class="o">%</span> <span class="n">if</span> <span class="n">is_incremental</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
    <span class="k">WHERE</span>
        <span class="p">(</span><span class="nb">datetime</span><span class="p">,</span> <span class="n">app_id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">event_name</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="nb">datetime</span><span class="p">,</span> <span class="n">app_id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">event_name</span> <span class="k">FROM</span> <span class="p">{{</span> <span class="n">this</span> <span class="p">}})</span>
    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h5 id="1-large-data-volume">1. Large Data Volume</h5>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">core_fct_events</code> table contained all user event log data, making the table size very large.</li>
</ul>

<h5 id="2-presence-of-duplicate-rows">2. Presence of Duplicate Rows</h5>
<ul>
  <li>Due to the existence of duplicate data in the source table itself, the <code class="language-plaintext highlighter-rouge">DISTINCT</code> keyword had to be used to remove duplicates.</li>
</ul>

<h5 id="3-inefficient-duplicate-check-method">3. Inefficient Duplicate Check Method</h5>
<ul>
  <li>The existing query used the <code class="language-plaintext highlighter-rouge">NOT IN</code> clause to compare new data with existing data, which was the main cause of the performance bottleneck. This clause triggers nested loop searches, causing performance degradation as the table size increases.</li>
</ul>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ul>
    <li><strong>I replaced the <code class="language-plaintext highlighter-rouge">NOT IN</code> clause with a <code class="language-plaintext highlighter-rouge">LEFT JOIN</code></strong> to effectively filter duplicate data while optimizing performance.</li>
  </ul>
</blockquote>

<h3 id="specific-actions-taken">Specific Actions Taken</h3>

<h5 id="1-problem-analysis-and-alternative-exploration">1. Problem Analysis and Alternative Exploration</h5>
<ul>
  <li>First, I identified that the <code class="language-plaintext highlighter-rouge">NOT IN</code> clause was the primary cause of the performance bottleneck. The <code class="language-plaintext highlighter-rouge">NOT IN</code> clause requires the database engine to check all possible combinations through <strong>nested loops</strong>, making it highly inefficient.</li>
</ul>

<p><img src="/assets/2024-08-13-join-instead-of-not-in/2.webp" alt="" /></p>

<h5 id="2-query-refactoring">2. Query Refactoring</h5>
<ul>
  <li>I replaced the existing <code class="language-plaintext highlighter-rouge">NOT IN</code> clause with a <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>. Using a <code class="language-plaintext highlighter-rouge">LEFT JOIN</code> allows for more efficient comparison between the existing table and the new data. Specifically, <strong>after performing the <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>, only new data that does not exist in the existing data is inserted by filtering for <code class="language-plaintext highlighter-rouge">NULL</code> values.</strong></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">SELECT</span>
        <span class="n">MAIN</span><span class="p">.</span><span class="o">*</span>
    <span class="k">FROM</span> 
        <span class="n">CTE_src_events</span> <span class="n">MAIN</span>
    <span class="c1">-- Incremental Strategy: Exclude data that already exists in the table. Do not insert those rows.</span>
    <span class="p">{</span><span class="o">%</span> <span class="n">if</span> <span class="n">is_incremental</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
        <span class="p">{{</span> <span class="n">this</span> <span class="p">}}</span> <span class="n">THIS</span>
        <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">datetime</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="nb">datetime</span>
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">app_id</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="n">app_id</span>
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="n">user_id</span>
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_name</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="n">event_name</span>
    <span class="k">WHERE</span>
        <span class="n">THIS</span><span class="p">.</span><span class="nb">datetime</span> <span class="k">IS</span> <span class="k">NULL</span>    
    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h5 id="3-performance-testing-and-validation">3. Performance Testing and Validation</h5>
<ul>
  <li>After modifying the query, I conducted performance tests using various data sets. This confirmed that the query execution time was significantly reduced. <strong>The optimized query execution time was reduced from 50 minutes to approximately 2 minutes.</strong></li>
</ul>

<hr />

<h1 id="5-results">5. Results</h1>

<blockquote>
  <ul>
    <li>Through query optimization, the total orchestration time was <strong>reduced from 50 minutes to 2 minutes</strong>, achieving approximately <strong>96% performance improvement</strong> and significantly enhancing data processing efficiency.</li>
  </ul>
</blockquote>

<p><img src="/assets/2024-08-13-join-instead-of-not-in/3.webp" alt="" /></p>

<h3 id="1-performance-improvement">1. Performance Improvement</h3>
<ul>
  <li>The total orchestration time was reduced <strong>from 50 minutes to 2 minutes</strong>, representing approximately <strong>96% performance improvement</strong>, drastically enhancing data processing speed.</li>
</ul>

<h3 id="2-improved-resource-efficiency">2. Improved Resource Efficiency</h3>
<ul>
  <li>Efficient use of database resources reduced system load, allowing other queries and tasks to execute more smoothly.</li>
</ul>

<h3 id="3-enhanced-service-reliability">3. Enhanced Service Reliability</h3>
<ul>
  <li>Faster and more reliable data updates provided a more dependable service to users.</li>
</ul>

<h3 id="4-future-scalability-secured">4. Future Scalability Secured</h3>
<ul>
  <li>The optimization efforts in preparation for increased traffic and data expansion have laid a foundation for easily meeting future data processing requirements.</li>
</ul>

<h3 id="conclusion">Conclusion</h3>
<ul>
  <li>This query optimization project significantly enhanced the performance of our data warehouse while also strengthening our analytics engineering capabilities. It was a valuable contribution to maximizing data processing efficiency and improving the quality of our BI services.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (English)" /><category term="Article (Issue Resolution)" /><category term="Level (2. Intermediate)" /><category term="Field (Analytics Engineering)" /><category term="Skills (SQL)" /><category term="Skills (dbt)" /><summary type="html"><![CDATA[“In this project, I optimized the incremental update strategy for the core_fct_events table to address query performance issues in our Enterprise Data Warehouse (EDW) environment. By replacing the inefficient NOT IN clause with a LEFT JOIN, I streamlined the duplicate data check process, reducing the overall orchestration time from 50 minutes to 2 minutes. This resulted in approximately a 96% performance improvement, significantly enhancing data processing efficiency and system resource utilization, thereby strengthening service stability and scalability.”]]></summary></entry><entry><title type="html">NOT IN 대신 JOIN을 통한 쿼리 최적화</title><link href="http://localhost:4000/join-instead-of-not-in-ko/" rel="alternate" type="text/html" title="NOT IN 대신 JOIN을 통한 쿼리 최적화" /><published>2024-08-13T00:00:00+09:00</published><updated>2024-08-13T00:00:00+09:00</updated><id>http://localhost:4000/join-instead-of-not-in-ko</id><content type="html" xml:base="http://localhost:4000/join-instead-of-not-in-ko/"><![CDATA[<blockquote>
  <p>“이번 프로젝트에서는 엔터프라이즈 데이터 웨어하우스(EDW) 환경에서 발생한 쿼리 성능 문제를 해결하기 위해, <code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블의 Incremental 업데이트 전략을 최적화했습니다. 기존의 비효율적인 <code class="language-plaintext highlighter-rouge">NOT IN</code> 구문을 <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>으로 대체하여 데이터 중복 검사를 최적화함으로써, 오케스트레이션 전체 소요 시간을 50분에서 2분으로 단축했습니다. 이로 인해 약 96%의 성능 개선을 이루었으며, 데이터 처리 효율성과 시스템 자원 활용도를 크게 향상시켜 서비스의 안정성과 확장성을 강화했습니다.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- 오케스트레이션 소요 시간: <code class="language-plaintext highlighter-rouge">50분</code> → <code class="language-plaintext highlighter-rouge">2분</code> (96% ↓)</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="목차">목차</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>엔터프라이즈 데이터 웨어하우스(EDW)에서 <strong>ELT 파이프라인의 오케스트레이션 작업이 예상보다 많은 시간을 소요</strong>하고 있었습니다. 특히, <code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블의 업데이트 과정에서 성능 문제가 발생하고 있었습니다.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블의 Incremental Strategy를 개선하여 오케스트레이션 작업의 <strong>전체 소요 시간을 줄이는 것</strong>을 목표로 삼았습니다. 이를 통해 증가하는 데이터 트래픽을 원활하게 처리하고, 서비스의 신뢰성을 높이려 했습니다.</li>
</ul>

<h3 id="actions">Actions</h3>
<ul>
  <li>쿼리 성능을 저하시키던 <strong><code class="language-plaintext highlighter-rouge">NOT IN</code> 구문을 <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>으로 변경</strong>하여, 중복 데이터를 효과적으로 필터링하는 동시에 성능을 최적화했습니다.</li>
</ul>

<h3 id="results">Results</h3>
<ul>
  <li>쿼리 최적화를 통해 오케스트레이션 전체 소요 시간이 <strong>50분에서 2분으로 대폭 감소</strong>했습니다. 이는 약 <strong>96%의 성능 개선</strong>을 의미하며, 데이터 처리 효율성을 크게 향상시켰습니다.</li>
</ul>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <ul>
    <li>엔터프라이즈 데이터 웨어하우스(EDW)에서 <strong>ELT 파이프라인의 오케스트레이션 작업이 예상보다 많은 시간을 소요</strong>하고 있었습니다. 특히, <code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블의 업데이트 과정에서 성능 문제가 발생하고 있었습니다.</li>
  </ul>
</blockquote>

<p><img src="/assets/2024-08-13-join-instead-of-not-in/1.webp" alt="" /></p>

<h3 id="구체적인-상황">구체적인 상황</h3>
<ul>
  <li>회사에서 B2B BI 서비스를 제공하기 위해 엔터프라이즈 데이터 웨어하우스(EDW) 환경을 운영하고 있었습니다. 매일 자정 무렵, 사용자 이벤트 데이터를 기반으로 한 복잡한 데이터 변환(Transformation) 작업이 수행되고 있었습니다. <strong>그러나 이 과정에서 예상보다 시간이 오래 걸리는 문제</strong>가 발생했습니다. 특히, <strong><code class="language-plaintext highlighter-rouge">core_fct_events</code>라는 주요 이벤트 테이블의 Incremental 업데이트 과정</strong>이 전체 오케스트레이션 시간의 대부분을 차지하고 있었습니다. 이로 인해 데이터 갱신이 지연되고, 서비스 품질에 부정적인 영향을 줄 우려가 있었습니다.</li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>

<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블의 Incremental Strategy를 개선하여 오케스트레이션 작업의 <strong>전체 소요 시간을 줄이는 것</strong>을 목표로 삼았습니다. 이를 통해 증가하는 데이터 트래픽을 원활하게 처리하고, 서비스의 신뢰성을 높이려 했습니다.</li>
  </ul>
</blockquote>

<h3 id="문제의-근본-원인">문제의 근본 원인</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블의 업데이트 과정에서 발생하는 세 가지 주요 문제를 확인했습니다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">WITH</span>
    <span class="n">CTE_src_events</span> <span class="k">AS</span> <span class="p">(</span>
        <span class="k">SELECT</span>
            <span class="k">DISTINCT</span>
            <span class="nb">datetime</span><span class="p">,</span>
            <span class="n">app_id</span><span class="p">,</span>
            <span class="n">user_id</span><span class="p">,</span>
            <span class="n">event_name</span>
        <span class="k">FROM</span>
            <span class="n">src_events</span>
        <span class="c1">-- Incremental Strategy: Read rows with a datetime greater than the maximum datetime currently stored in the table.</span>
        <span class="p">{</span><span class="o">%</span> <span class="n">if</span> <span class="n">is_incremental</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
        <span class="k">WHERE</span>
            <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="nb">datetime</span><span class="p">)</span> <span class="k">FROM</span> <span class="p">{{</span> <span class="n">this</span> <span class="p">}})</span> <span class="o">&lt;</span> <span class="nb">datetime</span>
        <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
    <span class="p">)</span>
    <span class="k">SELECT</span>
        <span class="o">*</span>
    <span class="k">FROM</span>
        <span class="n">CTE_src_events</span>
    <span class="c1">-- Incremental Strategy: Exclude data that already exists in the table. Do not insert those rows.</span>
    <span class="p">{</span><span class="o">%</span> <span class="n">if</span> <span class="n">is_incremental</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
    <span class="k">WHERE</span>
        <span class="p">(</span><span class="nb">datetime</span><span class="p">,</span> <span class="n">app_id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">event_name</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="nb">datetime</span><span class="p">,</span> <span class="n">app_id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">event_name</span> <span class="k">FROM</span> <span class="p">{{</span> <span class="n">this</span> <span class="p">}})</span>
    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h5 id="1-데이터의-대용량성">1. 데이터의 대용량성</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">core_fct_events</code> 테이블은 모든 사용자 이벤트 로그 데이터를 포함하고 있어 테이블 크기가 매우 컸습니다.</li>
</ul>

<h5 id="2-중복-데이터의-존재">2. 중복 데이터의 존재</h5>
<ul>
  <li>소스 테이블 자체에 중복 데이터가 존재하므로 <code class="language-plaintext highlighter-rouge">DISTINCT</code> 키워드를 사용해 중복 제거를 해야 했습니다.</li>
</ul>

<h5 id="3-비효율적인-중복-검사-방법">3. 비효율적인 중복 검사 방법</h5>
<ul>
  <li>기존 쿼리에서 <code class="language-plaintext highlighter-rouge">NOT IN</code> 구문을 사용하여 새로운 데이터와 기존 데이터를 비교하는 작업이 성능 병목의 주된 원인이었습니다. 이 구문은 Nested Loop 검색을 유발하여 테이블이 커질수록 성능이 저하될 수밖에 없었습니다.</li>
</ul>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ul>
    <li>쿼리 성능을 저하시키던 <strong><code class="language-plaintext highlighter-rouge">NOT IN</code> 구문을 <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>으로 변경</strong>하여, 중복 데이터를 효과적으로 필터링하는 동시에 성능을 최적화했습니다.</li>
  </ul>
</blockquote>

<h3 id="구체적인-조치-사항">구체적인 조치 사항</h3>

<h5 id="1-문제-분석-및-대안-탐색">1. 문제 분석 및 대안 탐색</h5>
<ul>
  <li>먼저 기존의 <code class="language-plaintext highlighter-rouge">NOT IN</code> 구문이 성능 병목을 일으키는 주요 원인임을 확인했습니다. <code class="language-plaintext highlighter-rouge">NOT IN</code> 구문은 데이터베이스 엔진이 <strong>Nested Loop</strong>를 통해 모든 가능한 조합을 확인해야 하므로, 매우 비효율적입니다.</li>
</ul>

<p><img src="/assets/2024-08-13-join-instead-of-not-in/2.webp" alt="" /></p>

<h5 id="2-쿼리-리팩토링">2. 쿼리 리팩토링</h5>
<ul>
  <li>기존 <code class="language-plaintext highlighter-rouge">NOT IN</code> 구문을 <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>으로 변경했습니다. <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>을 사용하면 기존 테이블과 새 데이터 간의 비교를 보다 효율적으로 수행할 수 있습니다. 구체적으로, <strong><code class="language-plaintext highlighter-rouge">LEFT JOIN</code> 후 <code class="language-plaintext highlighter-rouge">NULL</code> 값을 필터링하여 기존 데이터에 없는 새로운 데이터만 삽입</strong>하도록 했습니다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">SELECT</span>
        <span class="n">MAIN</span><span class="p">.</span><span class="o">*</span>
    <span class="k">FROM</span> 
        <span class="n">CTE_src_events</span> <span class="n">MAIN</span>
    <span class="c1">-- Incremental Strategy: Exclude data that already exists in the table. Do not insert those rows.</span>
    <span class="p">{</span><span class="o">%</span> <span class="n">if</span> <span class="n">is_incremental</span><span class="p">()</span> <span class="o">%</span><span class="p">}</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
        <span class="p">{{</span> <span class="n">this</span> <span class="p">}}</span> <span class="n">THIS</span>
        <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">datetime</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="nb">datetime</span>
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">app_id</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="n">app_id</span>
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="n">user_id</span>
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_name</span> <span class="o">=</span> <span class="n">THIS</span><span class="p">.</span><span class="n">event_name</span>
    <span class="k">WHERE</span>
        <span class="n">THIS</span><span class="p">.</span><span class="nb">datetime</span> <span class="k">IS</span> <span class="k">NULL</span>    
    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h5 id="3-성능-테스트-및-검증">3. 성능 테스트 및 검증</h5>
<ul>
  <li>쿼리 변경 후, 다양한 데이터 세트를 사용하여 성능 테스트를 진행했습니다. 이를 통해 쿼리 실행 시간이 크게 단축되었음을 확인하였습니다. <strong>최적화된 쿼리 실행 시간은 기존의 50분에서 약 2분으로 줄어들었습니다.</strong></li>
</ul>

<hr />

<h1 id="5-results">5. Results</h1>

<blockquote>
  <ul>
    <li>쿼리 최적화를 통해 오케스트레이션 전체 소요 시간이 <strong>50분에서 2분으로 대폭 감소</strong>했습니다. 이는 약 <strong>96%의 성능 개선</strong>을 의미하며, 데이터 처리 효율성을 크게 향상시켰습니다.</li>
  </ul>
</blockquote>

<p><img src="/assets/2024-08-13-join-instead-of-not-in/3.webp" alt="" /></p>

<h3 id="1-성능-개선">1. 성능 개선</h3>
<ul>
  <li>오케스트레이션 전체 소요 시간이 <strong>50분에서 2분으로</strong> 대폭 감소했습니다. 이는 약 <strong>96%의 성능 개선</strong>으로, 데이터 처리 속도를 획기적으로 향상시켰습니다.</li>
</ul>

<h3 id="2-리소스-효율성-향상">2. 리소스 효율성 향상</h3>
<ul>
  <li>데이터베이스 자원의 효율적인 사용을 통해 시스템 부하가 감소하였으며, 이로 인해 다른 쿼리 및 작업도 더욱 원활하게 실행될 수 있었습니다.</li>
</ul>

<h3 id="3-서비스-신뢰성-강화">3. 서비스 신뢰성 강화</h3>
<ul>
  <li>데이터 갱신이 빠르고 안정적으로 이루어짐으로써 사용자에게 보다 신뢰성 있는 서비스를 제공할 수 있었습니다.</li>
</ul>

<h3 id="4-미래-확장성-확보">4. 미래 확장성 확보</h3>
<ul>
  <li>트래픽 증가와 데이터 확장에 대비한 최적화 작업을 통해, 향후 데이터 처리 요구 사항을 보다 쉽게 충족할 수 있는 기반을 마련했습니다.</li>
</ul>

<h3 id="결론">결론</h3>
<ul>
  <li>이번 쿼리 최적화 프로젝트는 데이터 웨어하우스의 성능을 크게 향상시키는 동시에, 애널리틱스 엔지니어링 역량을 한층 강화하는 계기가 되었습니다. 데이터 처리 효율성을 극대화하고, BI 서비스의 품질을 높이는 데 중요한 기여를 했습니다.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (Korean)" /><category term="Article (Issue Resolution)" /><category term="Level (2. Intermediate)" /><category term="Field (Analytics Engineering)" /><category term="Skills (SQL)" /><category term="Skills (dbt)" /><summary type="html"><![CDATA[“이번 프로젝트에서는 엔터프라이즈 데이터 웨어하우스(EDW) 환경에서 발생한 쿼리 성능 문제를 해결하기 위해, core_fct_events 테이블의 Incremental 업데이트 전략을 최적화했습니다. 기존의 비효율적인 NOT IN 구문을 LEFT JOIN으로 대체하여 데이터 중복 검사를 최적화함으로써, 오케스트레이션 전체 소요 시간을 50분에서 2분으로 단축했습니다. 이로 인해 약 96%의 성능 개선을 이루었으며, 데이터 처리 효율성과 시스템 자원 활용도를 크게 향상시켜 서비스의 안정성과 확장성을 강화했습니다.”]]></summary></entry><entry><title type="html">데이터 기반 VOC 분석 및 자동화 대시보드 구축: 비용 절감과 효율성 극대화</title><link href="http://localhost:4000/voc-dashboard-ko/" rel="alternate" type="text/html" title="데이터 기반 VOC 분석 및 자동화 대시보드 구축: 비용 절감과 효율성 극대화" /><published>2024-07-20T00:00:00+09:00</published><updated>2024-07-20T00:00:00+09:00</updated><id>http://localhost:4000/voc-dashboard-ko</id><content type="html" xml:base="http://localhost:4000/voc-dashboard-ko/"><![CDATA[<blockquote>
  <p>“사내 구성원 분들이 젠데스크 고객 문의 내역 팔로업에 어려움을 겪고 있다는 사실을 공유 받아, 이를 해결하기 위해 Redash VOC 대시보드를 구축했습니다. 젠데스크 데이터를 자동으로 수집하고 전처리한 후, OpenAI API를 활용해 고객 문의 내역을 주제별로 분류하고 요약했습니다. 추가적으로, 매주 월요일마다 가장 많이 증가한 문의 주제를 슬랙으로 알림을 보내어, 고객 이슈를 효율적으로 식별하고 대응할 수 있도록 기여했습니다. 결과적으로 매월 약 $275 기회 비용을 제거할 수 있었으며, 사내 구성원 분들의 VOC 팔로업 시간을 감소시키는 성과를 얻었습니다.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- 기회 비용 절감: <code class="language-plaintext highlighter-rouge">$300/월</code> → <code class="language-plaintext highlighter-rouge">$25/월</code> (92% ↓)</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="목차">목차</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>사내 구성원 분들이 젠데스크 고객 문의 내역을 효율적으로 추적하고 팔로업하는 데 어려움을 겪고 있었습니다. 모든 내역을 읽는 것은 지나치게 <strong>많은 시간과 노력</strong>을 요구했으며, 외부 VOC 분석 서비스를 도입하기에는 <strong>비용의 부담</strong>이 있었습니다.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ol>
  <li>고객 문의 내역의 <strong>주제를 분류하고 요약</strong>하여, Redash VOC <strong>대시보드</strong>를 만들기로 결정했습니다.</li>
  <li>가장 긴급한 고객 문의 주제를 알려주는 <strong>슬랙 알림 봇</strong>을 구축하기로 결정했습니다.</li>
</ol>

<h3 id="actions">Actions</h3>
<ol>
  <li>
    <p><strong>데이터 파이프라인</strong></p>

    <p>1.1. 데이터 수집 및 전처리 <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

    <p>1.2. 주제 분류 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

    <p>1.3. 요약하기 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
  </li>
  <li>
    <p><strong>대시보드와 알림 봇</strong></p>

    <p>2.1. 대시보드 만들기 <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

    <p>2.2. 알림 봇 구축하기 <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
  </li>
</ol>

<h3 id="results">Results</h3>
<ol>
  <li><strong>비용 절약</strong>
    <ul>
      <li>월 $300 비용의 외부 서비스를 도입하지 않고도, 내부 개발을 통해 월 $25 비용 만으로 문제를 해소했습니다.</li>
    </ul>
  </li>
  <li><strong>시간 절감</strong>
    <ul>
      <li>사내 구성원 분들의 VOC 팔로업, 이슈 식별과 대응 속도를 향상시켰습니다.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <p>사내 구성원 분들이 젠데스크 고객 문의 내역을 효율적으로 추적하고 팔로업하는 데 어려움을 겪고 있었습니다. 모든 내역을 읽는 것은 지나치게 <strong>많은 시간과 노력</strong>을 요구했으며, 외부 VOC 분석 서비스를 도입하기에는 <strong>비용의 부담</strong>이 있었습니다.</p>
</blockquote>

<h3 id="구체적인-상황">구체적인 상황</h3>
<ul>
  <li>매주 수십-수백개의 고객 문의 내역을 일일이 팔로업하는 과정에서 너무 많은 시간이 소모되고 있었습니다.</li>
  <li>정확히 어떤 항목이 CX에 악영향을 끼치고 있는지 흐름을 파악하기 어려웠습니다.</li>
</ul>

<h3 id="사내-구성원-분들의-말말말">사내 구성원 분들의 말말말</h3>
<ul>
  <li><strong>임원 1</strong>: “주기적으로 문의 내역을 읽으며 고객의 감을 잡아가고 있는데, 양이 너무 많아 시간 소모가 커요.”</li>
  <li><strong>임원 2</strong>: “VOC 분석을 위한 외부 서비스를 도입하고 싶지만 가격이 너무 비싸서 고민하고 있어요.”</li>
  <li><strong>CX 담당자</strong>: “CX 및 VOC 현황을 좀 더 많은 동료들에게 공유하고, 이슈 대응 속도를 개선하고 싶어요.”</li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>

<blockquote>
  <ol>
    <li>고객 문의 내역의 <strong>주제를 분류하고 요약</strong>하여, Redash VOC <strong>대시보드</strong>를 만들기로 결정했습니다.</li>
    <li>가장 긴급한 고객 문의 주제를 알려주는 <strong>슬랙 알림 봇</strong>을 구축하기로 결정했습니다.</li>
  </ol>
</blockquote>

<p><img src="/assets/2024-07-20-voc-dashboard/1.png" alt="" /></p>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ol>
    <li>
      <p><strong>데이터 파이프라인</strong></p>

      <p>1.1. 데이터 수집 및 전처리 <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

      <p>1.2. 주제 분류 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

      <p>1.3. 요약하기 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
    </li>
    <li>
      <p><strong>대시보드와 알림 봇</strong></p>

      <p>2.1. 대시보드 만들기 <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

      <p>2.2. 알림 봇 구축하기 <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
    </li>
  </ol>
</blockquote>

<h3 id="1-데이터-파이프라인">1. <strong>데이터 파이프라인</strong></h3>

<p><img src="/assets/2024-07-20-voc-dashboard/2-ko.png" alt="" /></p>

<h5 id="11-데이터-수집-및-전처리-zendesk-tickets--google-sheets--bigquery">1.1. 데이터 수집 및 전처리 <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/3-ko.png" alt="" /></p>

<p>1) 먼저 Google Workspace Marketplace에서 제공하는 <strong>Zendesk Connector</strong>를 통해 답변이 완료된 젠데스크 티켓 데이터를 사내 비공개 구글 시트에 자동으로 저장될 수 있도록 설정했습니다.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/4.png" alt="" /></p>

<p>2) Python에서 구글 시트 데이터를 로드했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 구글 시트 Raw Data 불러오기 (to `df`)
</span>   <span class="n">gc</span> <span class="o">=</span> <span class="n">gspread</span><span class="p">.</span><span class="nf">service_account</span><span class="p">(</span><span class="n">google_sheets_credentials_fpath</span><span class="p">)</span>
   <span class="n">spreadsheet</span> <span class="o">=</span> <span class="n">gc</span><span class="p">.</span><span class="nf">open_by_url</span><span class="p">(</span><span class="n">google_sheets_url</span><span class="p">)</span>
   <span class="n">sheet</span> <span class="o">=</span> <span class="n">spreadsheet</span><span class="p">.</span><span class="nf">worksheet</span><span class="p">(</span><span class="n">google_sheets_worksheet_name</span><span class="p">)</span>
   <span class="n">sheet_data</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="nf">get_all_records</span><span class="p">()</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">sheet_data</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) 그런 후, 데이터 전처리를 진행했습니다.</p>

<details>
<summary>필요한 칼럼만 필터링</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 칼럼 이름 재정의하기
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span>
      <span class="n">columns</span><span class="o">=</span><span class="p">{</span>
         <span class="sh">'</span><span class="s">created_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">raw_subject</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">tags.0</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">updated_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">updated_datetime</span><span class="sh">'</span>
      <span class="p">}</span>
   <span class="p">)</span>
   <span class="c1"># 필요한 칼럼만 뽑아내기
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">description</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>시간대 변경 (UTC → KST)</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 기존 타임스탬프: UTC to KST 변환해주기
</span>   <span class="n">kst</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="nf">timezone</span><span class="p">(</span><span class="sh">'</span><span class="s">Asia/Seoul</span><span class="sh">'</span><span class="p">)</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">],</span> <span class="n">utc</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_convert</span><span class="p">(</span><span class="n">kst</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_localize</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># BigQuery에 Load할 때, 기본적으로 모두 String 타입이 되어야 하므로, 어쩔 수 없이 모두 String으로 Casting한다.
</span></code></pre></div>    </div>
  </div>
</details>

<details>
<summary>신규 항목들만 필터링</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 이미 타겟 테이블에 존재하는 행을 제거해주기 (중복 방지)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) 마지막으로 BigQuery 테이블에 적재했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 빅쿼리 테이블에 적재하기
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_table_id</span><span class="p">)</span>
   <span class="n">client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="12-주제-분류-openai-api">1.2. 주제 분류 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/5-ko.png" alt="" /></p>

<p>1) 분류할 주제 목록을 사전에 정의하기 위해, CX 담당자 및 UX/UI 디자이너 분과 함께 논의 후 분류 체계를 세웠습니다.</p>
<ul>
  <li><strong>Topic</strong>: 넓은 범주의 주제</li>
  <li><strong>Keyword</strong>: 구체적인 세부 주제</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/6.png" alt="" /></p>

<p>2) Python에서 BigQuery 테이블의 데이터를 로드했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># BigQuery `tickets` 테이블 불러오기 (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) 그 중, 신규 항목들만 필터링했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 이미 타겟 테이블에 존재하는 행을 제거해주기 (중복 제거)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_topics_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) OpenAI에 요청할 프롬프트를 작성했습니다.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   당신의 작업은 고객 문의 내역에서 하나의 핵심 키워드를 분류하는 것입니다.
   오로지 주어진 토픽 목록에서만 선택하여 응답해야 합니다.
   아래는 당신이 선택할 수 있는 토픽 목록입니다:
      {키워드 리스트}
   다른 토픽을 생성하거나 선택하지 마세요.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   아래는 고객 문의 내역입니다.
   이 텍스트에서 하나의 핵심 토픽을 추출하세요.

   고객 문의 내역:
         {실제 텍스트}

   추출 형식: 토픽
   제한 사항: 
   1. 오로지 토픽으로만 응답하세요.
   2. 주어진 토픽 목록에서만 선택하세요. 다른 토픽을 생성하거나 선택하지 마세요.
   3. 반드시 아래 목록에서 하나를 선택하세요:
   {키워드 리스트} 

   추출 결과: 
</code></pre></div>    </div>
  </div>
</details>

<p>5) 각 티켓을 순회하며 OpenAI 주제 분류 작업을 진행했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># OpenAI에 요청할 시스템 프롬프트 정의하기
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
   당신의 작업은 고객 문의 내역에서 하나의 핵심 키워드를 분류하는 것입니다.
   오로지 주어진 토픽 목록에서만 선택하여 응답해야 합니다.
   아래는 당신이 선택할 수 있는 토픽 목록입니다:
   </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s">
   다른 토픽을 생성하거나 선택하지 마세요.
   </span><span class="sh">'''</span>

   <span class="c1"># 각 행을 돌아가면서 OpenAI API Request 시작하기
</span>   <span class="n">topic2_results_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># 주제 + 본문
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># 2,000개 길이로 제한 (비용 절약)
</span>
      <span class="c1"># 개별적으로 요청할 프롬프트 정의
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      아래는 고객 문의 내역입니다.
      이 텍스트에서 하나의 핵심 토픽을 추출하세요.

      고객 문의 내역:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      추출 형식: 토픽
      제한 사항: 
      1. 오로지 토픽으로만 응답하세요.
      2. 주어진 토픽 목록에서만 선택하세요. 다른 토픽을 생성하거나 선택하지 마세요.
      3. 반드시 아래 목록에서 하나를 선택하세요:
      </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s"> 

      추출 결과: 
      </span><span class="sh">'''</span>

      <span class="c1"># API Request 시작
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># 토픽 결과를 Empty Lists에 기록하기
</span>      <span class="n">topic2_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">topic2_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topic2_result</span><span class="p">)</span>

   <span class="c1"># 토픽 2 결과를 통해 토픽 1 결과도 기록하기
</span>   <span class="n">topic1_results_list</span> <span class="o">=</span> <span class="p">[]</span>
   <span class="k">for</span> <span class="n">topic2</span> <span class="ow">in</span> <span class="n">topic2_results_list</span><span class="p">:</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">topic2</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
               <span class="k">break</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">Others</span><span class="sh">'</span><span class="p">)</span>
      
   <span class="c1"># df에 토픽 1, 토픽 2 칼럼을 추가하고, 필요한 칼럼만 뽑아내기
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic1_results_list</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic2_results_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>6) 마지막으로, 주제 분류 결과를 BigQuery 테이블에 적재했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 빅쿼리 테이블에 적재하기
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_topics_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="13-요약하기-openai-api">1.3. 요약하기 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/7-ko.png" alt="" /></p>

<p>1) Python에서 BigQuery 테이블의 데이터를 로드했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># BigQuery `tickets` 테이블 불러오기 (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) 그 중, 신규 항목들만 필터링했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 이미 타겟 테이블에 존재하는 행을 제거해주기 (중복 제거)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_summary_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) OpenAI에 요청할 프롬프트를 작성했습니다.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   당신의 작업은 고객 문의 내역을 한국어 한 문장으로 요약하는 것입니다.
   블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
   요약은 반드시 한국어 한 문장으로 제공되어야 하며, 민감한 개인정보나 링크는 반드시 제거되어야 합니다.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   아래는 고객 문의 내역입니다.
   이 텍스트를 한국어 하나의 문장으로 요약하세요.

   고객 문의 내역:
   {실제 텍스트}

   추출 형식: 한국어 한 문장
   제한 사항:
   1. 블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
   2. 반드시 한국어로 요약하세요. (단, 번역이 불가능한 고유 단어는 영어 가능)
   3. 오로지 한 문장으로만 응답하세요.
   4. 민감한 개인정보는 반드시 제거하세요.
   
   추출 결과:  
</code></pre></div>    </div>
  </div>
</details>

<p>4) 각 티켓을 순회하며 OpenAI 요약 작업을 진행했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># OpenAI에 요청할 시스템 프롬프트 정의하기
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
   당신의 작업은 고객 문의 내역을 한국어 한 문장으로 요약하는 것입니다.
   블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
   요약은 반드시 한국어 한 문장으로 제공되어야 하며, 민감한 개인정보나 링크는 반드시 제거되어야 합니다.
   </span><span class="sh">'''</span>

   <span class="c1"># 각 행을 돌아가면서 OpenAI API Request 시작하기
</span>   <span class="n">summaries_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># 주제 + 본문
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># 2,000개 길이로 제한 (비용 절약)
</span>
      <span class="c1"># 개별적으로 요청할 프롬프트 정의
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      아래는 고객 문의 내역입니다.
      이 텍스트를 한국어 하나의 문장으로 요약하세요.

      고객 문의 내역:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      추출 형식: 한국어 한 문장
      제한 사항:
      1. 블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
      2. 반드시 한국어로 요약하세요. (단, 번역이 불가능한 고유 단어는 영어 가능)
      3. 오로지 한 문장으로만 응답하세요.
      4. 민감한 개인정보는 반드시 제거하세요. (예: 인적사항, 지갑주소, 연락처, 비밀번호, 개인키, 니모닉, 이메일 주소, IP 주소, URL, 소셜 미디어 계정 등)
      
      추출 결과: 
      </span><span class="sh">'''</span>

      <span class="c1"># API Request 시작
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># 토픽 결과를 Empty Lists에 기록하기
</span>      <span class="n">summary_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">summaries_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">summary_result</span><span class="p">)</span>

   <span class="c1"># df에 요약 칼럼을 추가하고, 필요한 칼럼만 뽑아내기
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">summaries_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>5) 마지막으로, 요약 결과를 BigQuery 테이블에 적재했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 빅쿼리 테이블에 적재하기
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_summary_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h3 id="2-대시보드와-알림-봇">2. <strong>대시보드와 알림 봇</strong></h3>

<h5 id="21-대시보드-만들기-bigquery--redash">2.1. 대시보드 만들기 <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></h5>

<p>1) 다음 내용을 지닌 Redash 대시보드를 생성했습니다.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/11.png" alt="" /></p>

<details>
<summary>Topic별 비율</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/12.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Topic별 트렌드</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/13.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Keyword별 트렌드</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/14.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Keyword별 문의 요약</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/15.png" alt="" /></p>
  </div>
</details>

<details>
<summary>전체 데이터</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/16.png" alt="" /></p>
  </div>
</details>

<h5 id="22-알림-봇-구축하기-bigquery--slack-api">2.2. 알림 봇 구축하기 <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></h5>

<p>1) 우선, BigQuery 쿼리문을 작성했습니다.</p>

<details>
<summary>전주에 고객 문의 수가 가장 많이 증가한 세부 주제(Keyword)를 추출 (전전주 대비)</summary>
<div>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_1w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_2w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">2</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_diff</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">,</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="k">AS</span> <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="o">-</span> <span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_diff</span>
      <span class="k">FROM</span>
         <span class="n">CTE_1w_ago_raw</span> <span class="n">MAIN</span>
      <span class="k">LEFT</span> <span class="k">JOIN</span>
         <span class="n">CTE_2w_ago_raw</span> <span class="n">COMP</span>
         <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span> <span class="o">=</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span>
   <span class="p">)</span>
   <span class="k">SELECT</span>
      <span class="n">openai_topic_2</span><span class="p">,</span>
      <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_diff</span>
   <span class="k">FROM</span>
      <span class="n">CTE_diff</span>
   <span class="k">WHERE</span>
      <span class="n">tickets_cnt_diff</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">tickets_cnt_diff</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">CTE_diff</span><span class="p">)</span>
      <span class="k">AND</span> <span class="n">tickets_cnt_diff</span> <span class="o">&gt;</span> <span class="mi">0</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) 슬랙 메시지 객체를 작성했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>

   <span class="c1"># Slack 메시지 제목 만들기
</span>   <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">:phone: *Weekly Zendesk 요약* </span><span class="se">\n\n</span><span class="sh">'</span>
   <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*지난 1주 가장 많이 증가한 고객 문의 주제들입니다.* </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># 만약 데이터가 존재하는 경우
</span>   <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">topics</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_1w_agos</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_1w_ago</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_diffs</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_diff</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="c1"># Slack 메시지 만들기
</span>      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">topic</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">topics</span><span class="p">):</span>
         <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *</span><span class="si">{</span><span class="n">topic</span><span class="si">}</span><span class="s">*: 총 </span><span class="si">{</span><span class="n">tickets_cnt_1w_agos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s">건 (전주 대비 +</span><span class="si">{</span><span class="n">tickets_cnt_diffs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s">) </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># 만약 데이터가 존재하지 않는 경우
</span>   <span class="k">else</span><span class="p">:</span>
      <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *증가한 주제가 하나도 없어요.*:smile: </span><span class="se">\n\n</span><span class="sh">'</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) 매주 월요일 9:00 AM KST에 다음과 같은 슬랙 알림이 발송되었습니다.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/10-ko.png" alt="" /></p>

<hr />

<h1 id="5-results">5. Results</h1>

<blockquote>
  <ol>
    <li><strong>비용 절약</strong>
      <ul>
        <li>월 $300 비용의 외부 서비스를 도입하지 않고도, 내부 개발을 통해 월 $25 비용 만으로 문제를 해소했습니다.</li>
      </ul>
    </li>
    <li><strong>시간 절감</strong>
      <ul>
        <li>사내 구성원 분들의 VOC 팔로업, 이슈 식별과 대응 속도를 향상시켰습니다.</li>
      </ul>
    </li>
  </ol>
</blockquote>

<h3 id="1-비용-절약">1. <strong>비용 절약</strong></h3>

<p>결론) 내부 개발을 통해 매월 약 $275 기회 비용을 제거할 수 있었습니다.</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td><strong>외부 VOC 분석 서비스</strong></td>
      <td><strong>내부 개발</strong></td>
    </tr>
    <tr>
      <td>월간 비용</td>
      <td><code class="language-plaintext highlighter-rouge">$300</code></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
  </tbody>
</table>

<p>1) 외부 VOC 서비스</p>
<ul>
  <li>도입을 고려 중이었던 <a href="https://www.syncly.kr/">syncly</a>의 경우, 최소 월 $299의 비용이 요구되었습니다.</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/8.png" alt="" /></p>

<p>2) 내부 개발</p>
<ul>
  <li>그러나 직접 내부 개발은 다음과 같은 비용이 요구되었습니다.</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><strong>리소스</strong></td>
      <td><strong>월간 비용</strong></td>
    </tr>
    <tr>
      <td>1. OpenAI API</td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
    <tr>
      <td>2. BigQuery 스토리지</td>
      <td>거의 없음</td>
    </tr>
    <tr>
      <td>3. BigQuery 쿼리 사용</td>
      <td>미미함</td>
    </tr>
    <tr>
      <td>4. VM Instance 운영</td>
      <td>기존 인스턴스를 사용하므로 한계비용 적음</td>
    </tr>
    <tr>
      <td><strong>TOTAL</strong></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code> + e</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/2024-07-20-voc-dashboard/9.png" alt="ㅇㅇㅇ" /></p>
<blockquote>
  <p>일별 OpenAI API 비용</p>
</blockquote>

<h3 id="2-시간-절감">2. <strong>시간 절감</strong></h3>

<p>1) Redash VOC 대시보드 (주제 분류)</p>
<ul>
  <li>사내 구성원 분들의 VOC 이슈 <u>식별 편의성</u>을 향상시켰습니다.</li>
</ul>

<p>2) Redash VOC 대시보드 (요약)</p>
<ul>
  <li>사내 구성원 분들의 VOC <u>팔로업 속도</u>를 향상시키고 VOC에 대한 <u>접근성</u>을 개선했습니다.</li>
</ul>

<p>3) 슬랙 알림 봇</p>
<ul>
  <li>매주 문의 수가 가장 많이 늘어난 주제를 사내 구성원 분들에게 공유함으로써, 이슈 <u>식별과 대응 속도</u>를 향상시키고 동일한 <u>맥락을 공유</u>하는 데 기여했습니다.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (Korean)" /><category term="Article (Project)" /><category term="Level (2. Intermediate)" /><category term="Field (Data Visualization)" /><category term="Field (Analytics Engineering)" /><category term="Field (LLM)" /><category term="Skills (Python)" /><category term="Skills (SQL)" /><summary type="html"><![CDATA[“사내 구성원 분들이 젠데스크 고객 문의 내역 팔로업에 어려움을 겪고 있다는 사실을 공유 받아, 이를 해결하기 위해 Redash VOC 대시보드를 구축했습니다. 젠데스크 데이터를 자동으로 수집하고 전처리한 후, OpenAI API를 활용해 고객 문의 내역을 주제별로 분류하고 요약했습니다. 추가적으로, 매주 월요일마다 가장 많이 증가한 문의 주제를 슬랙으로 알림을 보내어, 고객 이슈를 효율적으로 식별하고 대응할 수 있도록 기여했습니다. 결과적으로 매월 약 $275 기회 비용을 제거할 수 있었으며, 사내 구성원 분들의 VOC 팔로업 시간을 감소시키는 성과를 얻었습니다.”]]></summary></entry><entry><title type="html">Data-driven VOC Analysis and Automated Dashboard Development: Reducing Cost and Maximizing Efficiency</title><link href="http://localhost:4000/voc-dashboard-en/" rel="alternate" type="text/html" title="Data-driven VOC Analysis and Automated Dashboard Development: Reducing Cost and Maximizing Efficiency" /><published>2024-07-20T00:00:00+09:00</published><updated>2024-07-20T00:00:00+09:00</updated><id>http://localhost:4000/voc-dashboard-en</id><content type="html" xml:base="http://localhost:4000/voc-dashboard-en/"><![CDATA[<blockquote>
  <p>“I learned that internal team members were facing difficulties in following up on Zendesk customer inquiries, so I developed a Redash VOC dashboard to address this issue. The system automatically collected and preprocessed Zendesk data, then used the OpenAI API to categorize and summarize customer inquiries by topic. Additionally, a Slack notification was set up to alert the team each Monday about the topics with the highest increase in inquiries, helping identify and respond to customer issues more efficiently. As a result, we were able to eliminate about $275 in opportunity costs each month and reduce the time spent by team members on VOC follow-ups.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- Opportunity Cost: <code class="language-plaintext highlighter-rouge">$300/month</code> → <code class="language-plaintext highlighter-rouge">$25/month</code> (92% ↓)</td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="table-of-contents">Table of Contents</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>Internal team members were struggling to efficiently track and follow up on Zendesk customer inquiries. Reading through all the inquiries required <strong>an excessive amount of time and effort</strong>, and implementing an external VOC analysis service posed <strong>a cost burden</strong>.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ol>
  <li>I decided to <strong>categorize and summarize</strong> customer inquiries and create a Redash VOC <strong>dashboard</strong>.</li>
  <li>I also decided to build <strong>a Slack notification bot</strong> to alert the team about the most urgent customer inquiry topics.</li>
</ol>

<h3 id="actions">Actions</h3>
<ol>
  <li>
    <p><strong>Data Pipeline</strong></p>

    <p>1.1. Data Collection and Preprocessing <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

    <p>1.2. Topic Categorization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

    <p>1.3. Summarization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
  </li>
  <li>
    <p><strong>Dashboard and Notification Bot</strong></p>

    <p>2.1. Creating the Dashboard <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

    <p>2.2. Building the Notification Bot <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
  </li>
</ol>

<h3 id="results">Results</h3>
<ol>
  <li><strong>Cost Savings</strong>
    <ul>
      <li>We solved the problem internally at a cost of $25 per month, avoiding the need for an external service that would have cost $300 per month.</li>
    </ul>
  </li>
  <li><strong>Time Savings</strong>
    <ul>
      <li>The time required for internal team members to follow up on VOC, identify issues, and respond was significantly reduced.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <p>Internal team members were struggling to efficiently track and follow up on Zendesk customer inquiries. Reading through all the inquiries required <strong>an excessive amount of time and effort</strong>, and implementing an external VOC analysis service posed <strong>a cost burden</strong>.</p>
</blockquote>

<h3 id="specific-situation">Specific Situation</h3>
<ul>
  <li>It was taking too much time to follow up on dozens to hundreds of customer inquiries each week.</li>
  <li>It was challenging to identify which topics were negatively impacting the customer experience.</li>
</ul>

<h3 id="feedback-from-internal-team-members">Feedback from Internal Team Members</h3>
<ul>
  <li><strong>C-level 1</strong>: “I’m trying to stay on top of customer sentiment by regularly reading the inquiries, but there are just too many, and it’s very time-consuming.”</li>
  <li><strong>C-level 2</strong>: “I’d like to introduce an external service for VOC analysis, but the cost is too high, so we’re hesitant.”</li>
  <li><strong>CX Manager</strong>: “I want to share more VOC insights with colleagues and improve the speed of issue resolution.”</li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>

<blockquote>
  <ol>
    <li>I decided to <strong>categorize and summarize</strong> customer inquiries and create a Redash VOC <strong>dashboard</strong>.</li>
    <li>I also decided to build <strong>a Slack notification bot</strong> to alert the team about the most urgent customer inquiry topics.</li>
  </ol>
</blockquote>

<p><img src="/assets/2024-07-20-voc-dashboard/1.png" alt="" /></p>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ol>
    <li>
      <p><strong>Data Pipeline</strong></p>

      <p>1.1. Data Collection and Preprocessing <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

      <p>1.2. Topic Categorization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

      <p>1.3. Summarization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
    </li>
    <li>
      <p><strong>Dashboard and Notification Bot</strong></p>

      <p>2.1. Creating the Dashboard <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

      <p>2.2. Building the Notification Bot <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
    </li>
  </ol>
</blockquote>

<h3 id="1-data-pipeline">1. <strong>Data Pipeline</strong></h3>

<p><img src="/assets/2024-07-20-voc-dashboard/2-en.png" alt="" /></p>

<h5 id="11-data-collection-and-preprocessing-zendesk-tickets--google-sheets--bigquery">1.1. Data Collection and Preprocessing <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/3-en.png" alt="" /></p>

<p>1) First, I used the <strong>Zendesk Connector</strong> available from Google Workspace Marketplace to automatically store completed Zendesk ticket data in a private Google Sheet.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/4.png" alt="" /></p>

<p>2) I then loaded the Google Sheets data into Python.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Raw Data from Google Sheets (to `df`)
</span>   <span class="n">gc</span> <span class="o">=</span> <span class="n">gspread</span><span class="p">.</span><span class="nf">service_account</span><span class="p">(</span><span class="n">google_sheets_credentials_fpath</span><span class="p">)</span>
   <span class="n">spreadsheet</span> <span class="o">=</span> <span class="n">gc</span><span class="p">.</span><span class="nf">open_by_url</span><span class="p">(</span><span class="n">google_sheets_url</span><span class="p">)</span>
   <span class="n">sheet</span> <span class="o">=</span> <span class="n">spreadsheet</span><span class="p">.</span><span class="nf">worksheet</span><span class="p">(</span><span class="n">google_sheets_worksheet_name</span><span class="p">)</span>
   <span class="n">sheet_data</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="nf">get_all_records</span><span class="p">()</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">sheet_data</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) After that, I proceeded with data preprocessing.</p>

<details>
<summary>Filter Only Necessary Columns</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Rename Columns
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span>
      <span class="n">columns</span><span class="o">=</span><span class="p">{</span>
         <span class="sh">'</span><span class="s">created_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">raw_subject</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">tags.0</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">updated_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">updated_datetime</span><span class="sh">'</span>
      <span class="p">}</span>
   <span class="p">)</span>
   <span class="c1"># Extract Only Necessary Columns
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">description</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>Change Timezone (UTC → KST)</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Convert Existing Timestamps: UTC to KST
</span>   <span class="n">kst</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="nf">timezone</span><span class="p">(</span><span class="sh">'</span><span class="s">Asia/Seoul</span><span class="sh">'</span><span class="p">)</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">],</span> <span class="n">utc</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_convert</span><span class="p">(</span><span class="n">kst</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_localize</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># To load into BigQuery, all columns must be cast as strings.
</span></code></pre></div>    </div>
  </div>
</details>

<details>
<summary>Filter Only New Entries</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Remove Rows Already in Target Table (Prevent Duplicates)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) Finally, I loaded the data into the BigQuery table.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Data into BigQuery Table
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_table_id</span><span class="p">)</span>
   <span class="n">client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="12-topic-categorization-openai-api">1.2. Topic Categorization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/5-en.png" alt="" /></p>

<p>1) To predefine the list of topics to be categorized, I discussed and established a classification system with a CX manager and a UX/UI designer.</p>

<ul>
  <li><strong>Topic</strong>: Broad subject categories</li>
  <li><strong>Keyword</strong>: Specific subtopics</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/6.png" alt="" /></p>

<p>2) I loaded the data from the BigQuery table into Python.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load BigQuery `tickets` Table (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) I then filtered out only new entries.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Remove Rows Already in Target Table (Prevent Duplicates)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_topics_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) I created the prompt to be sent to OpenAI.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Your task is to classify a single key keyword from the customer inquiry details. You must respond by selecting only from the provided list of topics. Below is the list of topics you can choose from:
      {Keyword List}
   Do not create or select any other topics.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Below is the customer inquiry details.
   Extract a single key topic from this text.

   Customer Inquiry Details:
      {Actual Text}

   Extraction Format: Topic
   Restrictions:
   1. Respond with only the topic.
   2. Choose only from the provided list of topics. Do not create or select any other topics.
   3. Make sure to select one from the list below:
   {Keyword List}
   
   Extraction Result:
</code></pre></div>    </div>
  </div>
</details>

<p>5) I then obtained the main topic by calling the OpenAI API.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Define the system prompt for OpenAI
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
   Your task is to classify a single key keyword from the customer inquiry details. You must respond by selecting only from the provided list of topics. Below is the list of topics you can choose from:
   </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s">
   Do not create or select any other topics.
   </span><span class="sh">'''</span>

   <span class="c1"># Start the OpenAI API Request for each row
</span>   <span class="n">topic2_results_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># Subject + Description
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># Limit length to 2,000 characters (to save costs)
</span>
      <span class="c1"># Define the individual prompt for API Request
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      Below is the customer inquiry details.
      Extract a single key topic from this text.

      Customer Inquiry Details:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      Extraction Format: Topic
      Restrictions:
      1. Respond with only the topic.
      2. Choose only from the provided list of topics. Do not create or select any other topics.
      3. Make sure to select one from the list below:
      </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s"> 
      
      Extraction Result:
      </span><span class="sh">'''</span>

      <span class="c1"># Start the API Request
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># Record the topic results into Empty Lists
</span>      <span class="n">topic2_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">topic2_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topic2_result</span><span class="p">)</span>

   <span class="c1"># Record the 'Topic 1' results using 'Topic 2' results
</span>   <span class="n">topic1_results_list</span> <span class="o">=</span> <span class="p">[]</span>
   <span class="k">for</span> <span class="n">topic2</span> <span class="ow">in</span> <span class="n">topic2_results_list</span><span class="p">:</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">topic2</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
               <span class="k">break</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">Others</span><span class="sh">'</span><span class="p">)</span>
      
   <span class="c1"># Add 'Topic 1' and 'Topic 2' columns to the dataframe and select only the necessary columns
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic1_results_list</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic2_results_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>6) Finally, the topic categorization results were loaded into a BigQuery table.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Data into BigQuery Table
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_topics_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="13-summarization-openai-api">1.3. Summarization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/7-en.png" alt="" /></p>

<p>1) I loaded the data from the BigQuery table into Python.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load BigQuery `tickets` Table (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) I then filtered out only new entries.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Remove Rows Already in Target Table (Prevent Duplicates)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_summary_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) I created the prompt to be sent to OpenAI.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   our task is to summarize customer inquiry details into a single sentence in Korean.
   Keep in mind that the customer is from a blockchain hardware and app wallet service company.
   The summary must be provided in a single sentence in Korean, and sensitive personal information or links must be removed.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Below is a customer inquiry.
      Summarize this text into a single sentence in Korean.

      Customer inquiry:
      {text}

      Format of extraction: One sentence in Korean
      Constraints:

      1. Remember that the customer is from a blockchain hardware and app wallet service company.
      2. Summarize in Korean only. (However, proper nouns that cannot be translated may remain in English.)
      3. Respond in only one sentence.
      4. Ensure that sensitive personal information is removed. (e.g., personal details, wallet addresses, contact information, passwords, private keys, mnemonic phrases, email addresses, IP addresses, URLs, social media accounts, etc.)

      Extraction result:
</code></pre></div>    </div>
  </div>
</details>

<p>4) I performed the OpenAI summarization task by iterating over each ticket.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Define the system prompt for OpenAI
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
   our task is to summarize customer inquiry details into a single sentence in Korean.
   Keep in mind that the customer is from a blockchain hardware and app wallet service company.
   The summary must be provided in a single sentence in Korean, and sensitive personal information or links must be removed.
   </span><span class="sh">'''</span>

   <span class="c1"># Start the OpenAI API Request for each row
</span>   <span class="n">summaries_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># Subject + Description
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># Limit length to 2,000 characters (to save costs)
</span>
      <span class="c1"># Define the individual prompt for API Request
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      Below is a customer inquiry.
      Summarize this text into a single sentence in Korean.

      Customer inquiry:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      Format of extraction: One sentence in Korean
      Constraints:

      1. Remember that the customer is from a blockchain hardware and app wallet service company.
      2. Summarize in Korean only. (However, proper nouns that cannot be translated may remain in English.)
      3. Respond in only one sentence.
      4. Ensure that sensitive personal information is removed. (e.g., personal details, wallet addresses, contact information, passwords, private keys, mnemonic phrases, email addresses, IP addresses, URLs, social media accounts, etc.)

      Extraction result:
      </span><span class="sh">'''</span>

      <span class="c1"># Start the API Request
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># Record the topic results into empty lists
</span>      <span class="n">summary_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">summaries_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">summary_result</span><span class="p">)</span>

   <span class="c1"># Add the summary column to the dataframe and select only the required columns
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">summaries_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>5) Finally, the summarized results were loaded into a BigQuery table.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Data into BigQuery Table
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_summary_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h3 id="2-dashboard-and-notification-bot">2. <strong>Dashboard and Notification Bot</strong></h3>

<h5 id="21-creating-the-dashboard-bigquery--redash">2.1. Creating the Dashboard <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></h5>

<p>1) I created a Redash dashboard with the following contents.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/11.png" alt="" /></p>

<details>
<summary>Proportion by Topic</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/12.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Trends by Topic</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/13.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Trends by Keyword</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/14.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Summary of Inquiries by Keyword</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/15.png" alt="" /></p>
  </div>
</details>

<details>
<summary>All Datasets</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/16.png" alt="" /></p>
  </div>
</details>

<h5 id="22-building-the-notification-bot-bigquery--slack-api">2.2. Building the Notification Bot <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></h5>

<p>1) First, I wrote a BigQuery query.</p>

<details>
<summary>Extracting the detailed topics (Keywords) with the most significant increase in customer inquiries from the previous week (compared to the week before)</summary>
<div>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_1w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_2w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">2</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_diff</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">,</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="k">AS</span> <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="o">-</span> <span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_diff</span>
      <span class="k">FROM</span>
         <span class="n">CTE_1w_ago_raw</span> <span class="n">MAIN</span>
      <span class="k">LEFT</span> <span class="k">JOIN</span>
         <span class="n">CTE_2w_ago_raw</span> <span class="n">COMP</span>
         <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span> <span class="o">=</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span>
   <span class="p">)</span>
   <span class="k">SELECT</span>
      <span class="n">openai_topic_2</span><span class="p">,</span>
      <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_diff</span>
   <span class="k">FROM</span>
      <span class="n">CTE_diff</span>
   <span class="k">WHERE</span>
      <span class="n">tickets_cnt_diff</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">tickets_cnt_diff</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">CTE_diff</span><span class="p">)</span>
      <span class="k">AND</span> <span class="n">tickets_cnt_diff</span> <span class="o">&gt;</span> <span class="mi">0</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) I created a Slack message object.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>

   <span class="c1"># Slack Message Title
</span>   <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">:phone: *Weekly Zendesk Summary* </span><span class="se">\n\n</span><span class="sh">'</span>
   <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*Here are the customer inquiry topics that increased the most in the past week.* </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># If data exists
</span>   <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">topics</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_1w_agos</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_1w_ago</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_diffs</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_diff</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="c1"># Create Slack message
</span>      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">topic</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">topics</span><span class="p">):</span>
         <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *</span><span class="si">{</span><span class="n">topic</span><span class="si">}</span><span class="s">*: Total </span><span class="si">{</span><span class="n">tickets_cnt_1w_agos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s"> cases (Compared to the previous week +</span><span class="si">{</span><span class="n">tickets_cnt_diffs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s">) </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># If no data exists
</span>   <span class="k">else</span><span class="p">:</span>
      <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *There are no topics that increased.*:smile: </span><span class="se">\n\n</span><span class="sh">'</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) Every Monday at 9:00 AM, the following Slack notification was sent.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/10-en.png" alt="" /></p>

<hr />

<h1 id="5-results">5. Results</h1>

<blockquote>
  <ol>
    <li><strong>Cost Savings</strong>
      <ul>
        <li>We solved the problem internally at a cost of $25 per month, avoiding the need for an external service that would have cost $300 per month.</li>
      </ul>
    </li>
    <li><strong>Time Savings</strong>
      <ul>
        <li>The time required for internal team members to follow up on VOC, identify issues, and respond was significantly reduced.</li>
      </ul>
    </li>
  </ol>
</blockquote>

<h3 id="1-cost-savings">1. <strong>Cost Savings</strong></h3>

<p>Conclusion)  By developing internally, we were able to eliminate approximately $275 in opportunity costs each month.</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td><strong>External VOC Analysis Service</strong></td>
      <td><strong>Internal Development</strong></td>
    </tr>
    <tr>
      <td>Monthly Cost</td>
      <td><code class="language-plaintext highlighter-rouge">$300</code></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
  </tbody>
</table>

<p>1) External VOC Analysis Service</p>
<ul>
  <li>The <a href="https://www.syncly.kr/">syncly</a> service we considered adopting required a minimum monthly cost of $299.</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/8.png" alt="" /></p>

<p>2) Internal Development</p>
<ul>
  <li>However, internal development required the following costs:</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><strong>Resource</strong></td>
      <td><strong>Monthly Cost</strong></td>
    </tr>
    <tr>
      <td>1. OpenAI API</td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
    <tr>
      <td>2. BigQuery Storage</td>
      <td>Minimal</td>
    </tr>
    <tr>
      <td>3. BigQuery Query Usage</td>
      <td>Negligible</td>
    </tr>
    <tr>
      <td>4. VM Instance Operation</td>
      <td>Minimal, as we used existing instances</td>
    </tr>
    <tr>
      <td><strong>TOTAL</strong></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code> + e</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/2024-07-20-voc-dashboard/9.png" alt="ㅇㅇㅇ" /></p>
<blockquote>
  <p>Daily OpenAI API Costs</p>
</blockquote>

<h3 id="2-time-savings">2. <strong>Time Savings</strong></h3>

<p>1) Redash VOC Dashboard (Topic Categorization)</p>
<ul>
  <li>Improved <u>the ease of identifying</u> VOC issues for internal team members.</li>
</ul>

<p>2) Redash VOC Dashboard (Summarization)</p>
<ul>
  <li>Enhanced <u>the follow-up speed</u> on VOC and improved <u>accessibility</u> for internal team members.</li>
</ul>

<p>3) Slack Notification Bot</p>
<ul>
  <li>Improved issue <u>identification</u> and <u>response speed</u> by sharing the topics with the highest increase in inquiries with internal team members each week, contributing to <u>a shared understanding of the context</u>.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (English)" /><category term="Article (Project)" /><category term="Level (2. Intermediate)" /><category term="Field (Data Visualization)" /><category term="Field (Analytics Engineering)" /><category term="Field (LLM)" /><category term="Skills (Python)" /><category term="Skills (SQL)" /><summary type="html"><![CDATA[“I learned that internal team members were facing difficulties in following up on Zendesk customer inquiries, so I developed a Redash VOC dashboard to address this issue. The system automatically collected and preprocessed Zendesk data, then used the OpenAI API to categorize and summarize customer inquiries by topic. Additionally, a Slack notification was set up to alert the team each Monday about the topics with the highest increase in inquiries, helping identify and respond to customer issues more efficiently. As a result, we were able to eliminate about $275 in opportunity costs each month and reduce the time spent by team members on VOC follow-ups.”]]></summary></entry><entry><title type="html">Rolling MAU 쿼리 최적화</title><link href="http://localhost:4000/rolling-mau-ko/" rel="alternate" type="text/html" title="Rolling MAU 쿼리 최적화" /><published>2024-06-30T00:00:00+09:00</published><updated>2024-06-30T00:00:00+09:00</updated><id>http://localhost:4000/rolling-mau-ko</id><content type="html" xml:base="http://localhost:4000/rolling-mau-ko/"><![CDATA[<blockquote>
  <p>“Rolling MAU와 같은 복잡한 Rolling Metrics를 계산하는 데는 대규모 데이터셋에서 막대한 시간과 비용이 소요될 수 있습니다. 기존 쿼리로 6시간 이상 걸리던 작업을 쿼리 최적화와 B-tree Index를 통해 6초로 단축했습니다. 이 과정에서 불필요한 메모리 사용을 줄이고 쿼리 성능을 극대화하여 데이터 처리 효율성을 크게 향상시켰습니다. 이를 통해 기업이 Rolling MAU 지표를 효율적으로 관리하고 인프라 비용을 절감하는 데 기여할 수 있었습니다.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- 쿼리 실행 시간: <code class="language-plaintext highlighter-rouge">6시간</code>→ <code class="language-plaintext highlighter-rouge">6초</code></td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="목차">목차</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>회사는 Rolling MAU와 같은 복잡한 Rolling Metrics를 계산하고 관리하는 데 <strong>막대한 비용과 시간을 소모</strong>하고 있었습니다. 특히, 사용자가 많아질수록 이 지표를 효율적으로 추출하는 것이 더욱 어려워질 것으로 예상되었으며, 실제로 기존 쿼리로는 Rolling MAU를 계산하는 데 <strong>6시간</strong> 이상 소요되었습니다. Incremental Strategy를 적용하더라도 <strong>2시간</strong>이 걸리는 상황이었습니다.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ul>
  <li>저는 Rolling MAU 지표를 효율적으로 계산할 수 있는 쿼리를 설계하여 실행 시간을 획기적으로 줄이고 인프라 비용을 절감하는 것을 목표로 삼았습니다. 이를 위해 <strong>쿼리 최적화를 통해 연산 비용을 낮추고 성능을 향상시키는 것</strong>이 필요했습니다.</li>
</ul>

<h3 id="actions">Actions</h3>

<ol>
  <li><strong>B-tree Index 생성</strong>
    <ul>
      <li>Rolling MAU를 계산할 때 가장 많은 시간이 소요되는 <code class="language-plaintext highlighter-rouge">date</code> 칼럼에 B-tree Index를 생성하여 스캔 속도를 향상시키고자 했습니다. 이를 통해 아래 조건에서 <strong>비교 연산의 부담을 줄이고자 한 것</strong>입니다.
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>쿼리 최적화</strong>
    <ul>
      <li>B-tree Index 생성 이후에도 성능 개선이 충분하지 않았습니다. 이에 따라 메모리 사용량을 줄이기 위해 쿼리에서 필요한 컬럼만 불러오는 방식으로 변경했습니다. MAIN 테이블에서 모든 행을 불러오는 대신, 아래와 같이 <strong>필요한 칼럼만 불러와 SELF JOIN 과정에서 기하급수적인 메모리 사용량을 대폭 줄였습니다.</strong>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nb">date</span> <span class="k">FROM</span> <span class="n">daily_activated_users</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h3 id="results">Results</h3>
<ul>
  <li>이 최적화 전략 덕분에 Rolling MAU 계산 <strong>쿼리의 실행 시간이 6시간에서 6초로 대폭 단축</strong>되었습니다. 이로 인해 데이터 처리 효율성이 극적으로 향상되었고, 쿼리 실행 시간과 인프라 비용 측면에서도 큰 절감 효과를 얻을 수 있었습니다. 이러한 성과는 기업이 Rolling Metrics와 같은 복잡한 지표를 보다 효율적으로 관리할 수 있도록 도왔습니다.</li>
</ul>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <ul>
    <li>회사는 Rolling MAU와 같은 복잡한 Rolling Metrics를 계산하고 관리하는 데 <strong>막대한 비용과 시간을 소모</strong>하고 있었습니다. 특히, 사용자가 많아질수록 이 지표를 효율적으로 추출하는 것이 더욱 어려워질 것으로 예상되었으며, 실제로 기존 쿼리로는 Rolling MAU를 계산하는 데 <strong>6시간</strong> 이상 소요되었습니다. Incremental Strategy를 적용하더라도 <strong>2시간</strong>이 걸리는 상황이었습니다.</li>
  </ul>
</blockquote>

<h3 id="구체적인-문제-상황">구체적인 문제 상황</h3>
<ul>
  <li>회사가 운영하는 프로덕트는 시간이 지남에 따라 사용자 수가 급증하고 있었으며, 데이터 웨어하우스 관점에서 최적화가 중요한 이슈로 떠오르고 있었습니다. 특히, Rolling MAU는 프로덕트 요금제의 기준으로 필수적인 지표 역할을 했습니다. 그러나 Rolling MAU의 계산 과정은 매우 복잡하고 연산 비용이 높아 큰 고민이 되었습니다.</li>
</ul>

<h3 id="기존-쿼리-분석-및-병목-지점-파악">기존 쿼리 분석 및 병목 지점 파악</h3>

<h5 id="1-기존-쿼리">(1) 기존 쿼리</h5>
<ul>
  <li>초기에 작성된 쿼리는 각 날짜별로 최근 30일 동안의 활성 사용자 수를 계산하기 위해 SELF JOIN을 사용했습니다. 이 방식은 모든 날짜에 대해 연관된 데이터를 반복적으로 조회하고 계산하는 과정에서 O(n²)의 연산 복잡도를 가지며, 사용자가 많아질수록 연산 비용이 기하급수적으로 증가하는 문제점을 지니고 있었습니다. 실제로, 이 쿼리를 Full Scan으로 실행할 때 6시간 이상 소요되었으며, Incremental Strategy로 실행해도 2시간 가까이 걸렸습니다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
 <span class="k">FROM</span>
    <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span>
    <span class="n">daily_activated_users</span> <span class="n">SUB</span>
    <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
 <span class="k">GROUP</span> <span class="k">BY</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
 <span class="k">ORDER</span> <span class="k">BY</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="2-기존-쿼리-분석-rolling-2-day-active-users-사례">(2) 기존 쿼리 분석 (<code class="language-plaintext highlighter-rouge">Rolling 2-day Active Users 사례</code>)</h5>

<ul>
  <li><strong>A</strong>. 먼저, 아래 과정을 통해 <code class="language-plaintext highlighter-rouge">daily_activated_users</code> 테이블의 데이터를 가져옵니다.
    <details>
 <summary>자세히 보기</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">FROM</span>
       <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
</code></pre></div>        </div>

        <p><img src="/assets/2024-06-30-rolling-mau/1.webp" alt="Joshua Kim" /></p>
      </div>
 </details>
  </li>
  <li><strong>B</strong>. 그런 후, SELF JOIN을 통해 각 일별 Recent 2-day 활성 사용자 목록을 모두 이어 붙입니다.
    <details>
 <summary>자세히 보기</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">FROM</span>
       <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
       <span class="n">daily_activated_users</span> <span class="n">SUB</span>
       <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>        </div>

        <p><img src="/assets/2024-06-30-rolling-mau/2.webp" alt="Joshua Kim" /></p>
      </div>
 </details>
  </li>
  <li><strong>C</strong>. 이제 <code class="language-plaintext highlighter-rouge">MAIN.date</code>를 기준으로 그룹화하여 순수 사용자 수를 계산합니다.
    <details>
 <summary>자세히 보기</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">SELECT</span>
       <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
    <span class="k">FROM</span>
       <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
       <span class="n">daily_activated_users</span> <span class="n">SUB</span>
       <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>        </div>

        <p><img src="/assets/2024-06-30-rolling-mau/3.webp" alt="Joshua Kim" /></p>
      </div>
 </details>
  </li>
  <li>정확한 병목 지점 파악
    <ul>
      <li><strong>연산 시간이 가장 많이 소모되는 지점은 단계 B입니다.</strong> 이 단계에서는 각 행마다 Recent 2-day Window에 해당하는 모든 행을 이어 붙이는 과정이 이루어집니다. 예를 들어, 1월 2일의 행 수가 10개이고, Recent 2-day Window에 해당하는 행이 100개라면, 총 1,000개의 행(10*100)을 이어 붙여야 하므로 메모리 사용량이 급격히 증가합니다. 즉, SELF JOIN을 통해 각 일별 Recent 2-day 활성 사용자 목록을 이어 붙이는 과정이 Scan 시간과 메모리 사용량을 상당히 많이 소모하는 원인이었습니다.</li>
      <li>이러한 상황에서, Rolling MAU 지표를 보다 효율적으로 개선하고 쿼리 실행 시간을 대폭 줄이기 위한 최적화가 시급한 과제로 떠올랐습니다. 또한, 기존 인프라로는 이와 같은 연산 비용을 지속적으로 감당하는 것이 비효율적이었기 때문에, 최적화를 통해 인프라 비용도 절감할 필요가 있었습니다. 즉, 비용과 시간을 절감할 수 있는 솔루션을 찾는 것이 절실한 상황이었습니다.</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>
<blockquote>
  <ul>
    <li>저는 Rolling MAU 지표를 효율적으로 계산할 수 있는 쿼리를 설계하여 실행 시간을 획기적으로 줄이고 인프라 비용을 절감하는 것을 목표로 삼았습니다. 이를 위해 <strong>쿼리 최적화를 통해 연산 비용을 낮추고 성능을 향상시키는 것</strong>이 필요했습니다.</li>
  </ul>
</blockquote>

<h3 id="1-쿼리-실행-시간-단축"><strong>1. 쿼리 실행 시간 단축</strong></h3>
<ul>
  <li>Rolling MAU를 계산하는 기존 쿼리는 O(n²)의 연산 복잡도를 가지고 있었기 때문에, 실행 시간이 6시간 이상 걸렸습니다. 이를 크게 단축하여 실시간 분석에 가까운 성능을 구현하는 것이 최우선 과제였습니다. 실행 시간을 초 단위로 줄여야만, 빠르게 변화하는 사용자 활동 데이터를 분석하고 즉각적으로 대응할 수 있는 환경을 마련할 수 있었습니다.</li>
</ul>

<h3 id="2-인프라-비용-절감"><strong>2. 인프라 비용 절감</strong></h3>
<ul>
  <li>쿼리 실행 시 사용되는 메모리와 처리 능력은 비용으로 직결됩니다. 기존 쿼리는 데이터 양이 증가함에 따라 메모리 사용량도 기하급수적으로 늘어나고, 이로 인해 인프라 비용이 급증하는 문제가 있었습니다. 따라서, 메모리 사용량을 줄이고 인프라 자원을 효율적으로 활용할 수 있는 쿼리 구조를 설계하는 것이 필요했습니다.</li>
</ul>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ol>
    <li><strong>B-tree Index 생성</strong>
      <ul>
        <li>Rolling MAU를 계산할 때 가장 많은 시간이 소요되는 <code class="language-plaintext highlighter-rouge">date</code> 칼럼에 B-tree Index를 생성하여 스캔 속도를 향상시키고자 했습니다. 이를 통해 아래 조건에서 <strong>비교 연산의 부담을 줄이고자 한 것</strong>입니다.
          <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>          </div>
        </li>
      </ul>
    </li>
    <li><strong>쿼리 최적화</strong>
      <ul>
        <li>B-tree Index 생성 이후에도 성능 개선이 충분하지 않았습니다. 이에 따라 메모리 사용량을 줄이기 위해 쿼리에서 필요한 컬럼만 불러오는 방식으로 변경했습니다. MAIN 테이블에서 모든 행을 불러오는 대신, 아래와 같이 <strong>필요한 칼럼만 불러와 SELF JOIN 과정에서 기하급수적인 메모리 사용량을 대폭 줄였습니다.</strong>
          <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nb">date</span> <span class="k">FROM</span> <span class="n">daily_activated_users</span>
</code></pre></div>          </div>
        </li>
      </ul>
    </li>
  </ol>
</blockquote>

<h3 id="1-b-tree-index-생성"><strong>1. B-tree Index 생성</strong></h3>
<ul>
  <li>병목 지점이었던 <code class="language-plaintext highlighter-rouge">date</code> 칼럼 비교 연산의 성능을 향상시키기 위해, <code class="language-plaintext highlighter-rouge">date</code> 칼럼에 <strong>B-tree Index</strong>를 생성했습니다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_dates</span> <span class="k">ON</span> <span class="n">daily_activated_users</span> <span class="k">USING</span> <span class="n">btree</span> <span class="p">(</span><span class="nb">date</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>이를 통해, 아래의 <code class="language-plaintext highlighter-rouge">date</code> 검색 속도를 개선하여 쿼리 시간이 소폭 개선되었으나, 여전히 메모리 사용량과 실행 시간이 과도하게 많이 소요되고 있었습니다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">FROM</span>
    <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span>
    <span class="n">daily_activated_users</span> <span class="n">SUB</span>
    <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-쿼리-최적화"><strong>2. 쿼리 최적화</strong></h3>
<ul>
  <li>안타깝게도 <code class="language-plaintext highlighter-rouge">date</code> 칼럼을 Index로 생성했음에도 불구하고 쿼리 실행 시간은 여전히 과도하게 많이 소요되고 있었습니다.</li>
  <li><strong>즉, 핵심 문제는 <code class="language-plaintext highlighter-rouge">date</code> 칼럼 비교 연산 과정이라기보다는, SELF JOIN 과정의 기하급수적인 메모리 사용 과정이었던 것입니다.</strong> 따라서 메모리 사용량을 줄이기 위해 반드시 필요한 칼럼만을 불러오는 방법을 고안했습니다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
 <span class="k">FROM</span>
    <span class="p">(</span><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nb">date</span> <span class="k">FROM</span> <span class="n">daily_activated_users</span><span class="p">)</span> <span class="n">MAIN</span> <span class="c1">-- 변경한 부분</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span>
    <span class="n">daily_activated_users</span> <span class="n">SUB</span>
    <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
 <span class="k">GROUP</span> <span class="k">BY</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>    </div>
  </li>
  <li>이를 통해 SELF JOIN의 데이터 처리량을 드라마틱하게 줄여 메모리 사용량을 대폭 감소시켰습니다.</li>
</ul>

<hr />

<h1 id="5-results">5. Results</h1>
<blockquote>
  <ul>
    <li>이 최적화 전략 덕분에 Rolling MAU 계산 <strong>쿼리의 실행 시간이 6시간에서 6초로 대폭 단축</strong>되었습니다. 이로 인해 데이터 처리 효율성이 극적으로 향상되었고, 쿼리 실행 시간과 인프라 비용 측면에서도 큰 절감 효과를 얻을 수 있었습니다. 이러한 성과는 기업이 Rolling Metrics와 같은 복잡한 지표를 보다 효율적으로 관리할 수 있도록 도왔습니다.</li>
  </ul>
</blockquote>

<h3 id="쿼리-실행-시간의-극적-단축"><strong>쿼리 실행 시간의 극적 단축</strong></h3>
<ul>
  <li>Rolling MAU는 프로덕트의 요금제 기준으로 기획되었기 때문에, 본 문제는 상당히 중요한 이슈였습니다.
    <ul>
      <li><strong>최적화 이전</strong>: Rolling MAU를 계산하는 쿼리가 약 6시간 소요</li>
      <li><strong>최적화 이후</strong>: 동일한 작업이 단 6초 만에 완료</li>
    </ul>
  </li>
  <li>이렇게 단축된 실행 시간 덕분에 더욱 안정적인 프로덕트 운영이 가능해졌으며 요금제 기준의 대체 방법을 고민할 수도 있었던 기업의 기회비용을 절약할 수 있었습니다.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (Korean)" /><category term="Article (Issue Resolution)" /><category term="Level (3. Advanced)" /><category term="Field (Analytics Engineering)" /><category term="Skills (SQL)" /><summary type="html"><![CDATA[“Rolling MAU와 같은 복잡한 Rolling Metrics를 계산하는 데는 대규모 데이터셋에서 막대한 시간과 비용이 소요될 수 있습니다. 기존 쿼리로 6시간 이상 걸리던 작업을 쿼리 최적화와 B-tree Index를 통해 6초로 단축했습니다. 이 과정에서 불필요한 메모리 사용을 줄이고 쿼리 성능을 극대화하여 데이터 처리 효율성을 크게 향상시켰습니다. 이를 통해 기업이 Rolling MAU 지표를 효율적으로 관리하고 인프라 비용을 절감하는 데 기여할 수 있었습니다.”]]></summary></entry><entry><title type="html">Rolling MAU Query Optimization</title><link href="http://localhost:4000/rolling-mau-en/" rel="alternate" type="text/html" title="Rolling MAU Query Optimization" /><published>2024-06-30T00:00:00+09:00</published><updated>2024-06-30T00:00:00+09:00</updated><id>http://localhost:4000/rolling-mau-en</id><content type="html" xml:base="http://localhost:4000/rolling-mau-en/"><![CDATA[<blockquote>
  <p>“Calculating complex Rolling Metrics like Rolling MAU can consume significant time and cost on large datasets. A task that previously took over 6 hours with the original query was reduced to 6 seconds through query optimization and the use of a B-tree Index. This process significantly enhanced data processing efficiency by minimizing unnecessary memory usage and maximizing query performance. As a result, the company was able to manage Rolling MAU metrics more efficiently, contributing to infrastructure cost savings.”</p>
</blockquote>

<hr />

<table>
  <thead>
    <tr>
      <th><strong>Performance Summary</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- Query Execution Time: <code class="language-plaintext highlighter-rouge">6 hours</code>→ <code class="language-plaintext highlighter-rouge">6 seconds</code></td>
    </tr>
  </tbody>
</table>

<hr />

<h1 id="table-of-contents">Table of Contents</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>The company was consuming <strong>significant time and costs</strong> to calculate and manage complex Rolling Metrics like Rolling MAU. As the number of users increased, it was expected to become even more challenging to extract this metric efficiently, and indeed, the original query took more than <strong>6 hours</strong> to calculate Rolling MAU. Even with an Incremental Strategy applied, it still took <strong>2 hours</strong>.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ul>
  <li>My goal was to design a query that could calculate the Rolling MAU metric efficiently, drastically reduce execution time, and lower infrastructure costs. This required <strong>query optimization to reduce computational costs and improve performance</strong>.</li>
</ul>

<h3 id="actions">Actions</h3>

<ol>
  <li><strong>Creating a B-tree Index</strong>
    <ul>
      <li>To speed up the most time-consuming process of calculating Rolling MAU, I created a B-tree Index on the <code class="language-plaintext highlighter-rouge">date</code> column to enhance scan speed. This was intended to <strong>reduce the burden of comparison operations</strong> under the following condition:
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>Query Optimization</strong>
    <ul>
      <li>Even after creating the B-tree Index, the performance improvement was not sufficient. Therefore, I changed the query to fetch only the necessary columns to reduce memory usage. Instead of fetching all rows from the MAIN table, I fetched only the necessary columns, <strong>significantly reducing the exponential memory usage during the SELF JOIN process.</strong>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nb">date</span> <span class="k">FROM</span> <span class="n">daily_activated_users</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h3 id="results">Results</h3>
<ul>
  <li>Thanks to this optimization strategy, the execution time for the Rolling MAU calculation query was <strong>reduced from 6 hours to 6 seconds.</strong> This led to a dramatic improvement in data processing efficiency and significant cost savings in query execution time and infrastructure. These results helped the company manage complex metrics like Rolling Metrics more efficiently.</li>
</ul>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <ul>
    <li>The company was consuming <strong>significant time and costs</strong> to calculate and manage complex Rolling Metrics like Rolling MAU. As the number of users increased, it was expected to become even more challenging to extract this metric efficiently, and indeed, the original query took more than <strong>6 hours</strong> to calculate Rolling MAU. Even with an Incremental Strategy applied, it still took <strong>2 hours</strong>.</li>
  </ul>
</blockquote>

<h3 id="specific-problem-situation">Specific Problem Situation</h3>
<ul>
  <li>The company’s product saw a rapid increase in users over time, making optimization a critical issue from a data warehouse perspective. The Rolling MAU, a key metric for product pricing, played an essential role. However, the calculation process for Rolling MAU was very complex and computationally expensive, which posed a significant challenge.</li>
</ul>

<h3 id="analysis-of-the-existing-query-and-identification-of-bottlenecks">Analysis of the Existing Query and Identification of Bottlenecks</h3>

<h5 id="1-the-existing-query">(1) The Existing Query</h5>
<ul>
  <li>The initial query used a SELF JOIN to calculate the number of active users over the last 30 days for each date. This approach had a computational complexity of O(n²) because it repeatedly retrieved and calculated related data for each date, causing an exponential increase in computation cost as the number of users grew. In practice, this query took more than 6 hours to execute with a Full Scan, and nearly 2 hours even with an Incremental Strategy.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
 <span class="k">FROM</span>
    <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span>
    <span class="n">daily_activated_users</span> <span class="n">SUB</span>
    <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
 <span class="k">GROUP</span> <span class="k">BY</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
 <span class="k">ORDER</span> <span class="k">BY</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="2-analysis-of-the-existing-query-rolling-2-day-active-users-example">(2) Analysis of the Existing Query (<code class="language-plaintext highlighter-rouge">Rolling 2-day Active Users Example</code>)</h5>

<ul>
  <li><strong>A</strong>. First, the <code class="language-plaintext highlighter-rouge">daily_activated_users</code> table data is retrieved through the following process:
    <details>
 <summary>View code</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">FROM</span>
       <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
</code></pre></div>        </div>

        <p><img src="/assets/2024-06-30-rolling-mau/1.webp" alt="Joshua Kim" /></p>
      </div>
 </details>
  </li>
  <li><strong>B</strong>. Then, a SELF JOIN is performed to concatenate the list of active users for the recent 2-day period for each day.
    <details>
 <summary>View code</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">FROM</span>
       <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
       <span class="n">daily_activated_users</span> <span class="n">SUB</span>
       <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>        </div>

        <p><img src="/assets/2024-06-30-rolling-mau/2.webp" alt="Joshua Kim" /></p>
      </div>
 </details>
  </li>
  <li><strong>C</strong>. Now, the users are grouped by <code class="language-plaintext highlighter-rouge">MAIN.date</code> to calculate the unique number of users.
    <details>
 <summary>View code</summary>
 <div>
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">SELECT</span>
       <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
       <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
    <span class="k">FROM</span>
       <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
       <span class="n">daily_activated_users</span> <span class="n">SUB</span>
       <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
       <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>        </div>

        <p><img src="/assets/2024-06-30-rolling-mau/3.webp" alt="Joshua Kim" /></p>
      </div>
 </details>
  </li>
  <li>Identifying the Exact Bottleneck
    <ul>
      <li><strong>The most time-consuming part is step B.</strong> In this step, all rows corresponding to the Recent 2-day Window are concatenated for each row. For example, if there are 10 rows on January 2nd, and 100 rows corresponding to the Recent 2-day Window, a total of 1,000 rows (10*100) need to be concatenated, resulting in a rapid increase in memory usage. The process of concatenating the list of active users for each day through SELF JOIN was the primary cause of excessive scan time and memory usage.</li>
      <li>Given this situation, it became urgent to optimize the Rolling MAU metric to improve efficiency and significantly reduce query execution time. Additionally, continuing to bear such computational costs with the existing infrastructure was inefficient, necessitating optimization to reduce infrastructure costs. In other words, finding a solution to save both time and costs was crucial.</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>
<blockquote>
  <ul>
    <li>My goal was to design a query that could calculate the Rolling MAU metric efficiently, drastically reduce execution time, and lower infrastructure costs. This required <strong>query optimization to reduce computational costs and improve performance</strong>.</li>
  </ul>
</blockquote>

<h3 id="1-reducing-query-execution-time"><strong>1. Reducing Query Execution Time</strong></h3>
<ul>
  <li>The original query for calculating Rolling MAU had a computational complexity of O(n²), resulting in an execution time of over 6 hours. Drastically reducing this time to achieve near real-time performance was the top priority. Reducing execution time to the second level was essential to quickly analyze changing user activity data and respond immediately.</li>
</ul>

<h3 id="2-reducing-infrastructure-costs"><strong>2. Reducing Infrastructure Costs</strong></h3>
<ul>
  <li>Memory and processing power used during query execution directly translate to costs. The original query had an issue where memory usage increased exponentially as the data volume grew, leading to a sharp rise in infrastructure costs. Therefore, it was necessary to design a query structure that minimized memory usage and efficiently utilized infrastructure resources.</li>
</ul>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ol>
    <li><strong>Creating a B-tree Index</strong>
      <ul>
        <li>To speed up the most time-consuming process of calculating Rolling MAU, I created a B-tree Index on the <code class="language-plaintext highlighter-rouge">date</code> column to enhance scan speed. This was intended to <strong>reduce the burden of comparison operations</strong> under the following condition:
          <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>          </div>
        </li>
      </ul>
    </li>
    <li><strong>Query Optimization</strong>
      <ul>
        <li>Even after creating the B-tree Index, the performance improvement was not sufficient. Therefore, I changed the query to fetch only the necessary columns to reduce memory usage. Instead of fetching all rows from the MAIN table, I fetched only the necessary columns, <strong>significantly reducing the exponential memory usage during the SELF JOIN process.</strong>
          <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nb">date</span> <span class="k">FROM</span> <span class="n">daily_activated_users</span>
</code></pre></div>          </div>
        </li>
      </ul>
    </li>
  </ol>
</blockquote>

<h3 id="1-creating-a-b-tree-index"><strong>1. Creating a B-tree Index</strong></h3>
<ul>
  <li>To improve the performance of comparison operations on the <code class="language-plaintext highlighter-rouge">date</code> column, which was the bottleneck, I created a <strong>B-tree Index</strong> on the <code class="language-plaintext highlighter-rouge">date</code> column.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_dates</span> <span class="k">ON</span> <span class="n">daily_activated_users</span> <span class="k">USING</span> <span class="n">btree</span> <span class="p">(</span><span class="nb">date</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>This improved the search speed for <code class="language-plaintext highlighter-rouge">date</code> and slightly reduced query time, but the memory usage and execution time were still excessively high.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">FROM</span>
    <span class="n">daily_activated_users</span> <span class="n">MAIN</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span>
    <span class="n">daily_activated_users</span> <span class="n">SUB</span>
    <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-query-optimization"><strong>2. Query Optimization</strong></h3>
<ul>
  <li>Unfortunately, even after creating an index on the <code class="language-plaintext highlighter-rouge">date</code> column, the query execution time was still excessively high.</li>
  <li><strong>The core issue was not the comparison operations on the <code class="language-plaintext highlighter-rouge">date</code> column, but rather the exponential memory usage during the SELF JOIN process.</strong> To reduce memory usage, I devised a method to retrieve only the necessary columns.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
 <span class="k">FROM</span>
    <span class="p">(</span><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="nb">date</span> <span class="k">FROM</span> <span class="n">daily_activated_users</span><span class="p">)</span> <span class="n">MAIN</span> <span class="c1">-- The Modified Part</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span>
    <span class="n">daily_activated_users</span> <span class="n">SUB</span>
    <span class="k">ON</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="k">BETWEEN</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'29 DAYS'</span> <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
 <span class="k">GROUP</span> <span class="k">BY</span>
    <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div>    </div>
  </li>
  <li>This drastically reduced the data processing load during SELF JOIN, significantly decreasing memory usage.</li>
</ul>

<hr />

<h1 id="5-results">5. Results</h1>
<blockquote>
  <ul>
    <li>Thanks to this optimization strategy, the execution time for the Rolling MAU calculation query was <strong>reduced from 6 hours to 6 seconds.</strong> This led to a dramatic improvement in data processing efficiency and significant cost savings in query execution time and infrastructure. These results helped the company manage complex metrics like Rolling Metrics more efficiently.</li>
  </ul>
</blockquote>

<h3 id="dramatic-reduction-in-query-execution-time"><strong>Dramatic Reduction in Query Execution Time</strong></h3>
<ul>
  <li>Since Rolling MAU was a key metric for product pricing, this issue was of significant importance.
    <ul>
      <li><strong>Before Optimization</strong>: The query for calculating Rolling MAU took about 6 hours</li>
      <li><strong>After Optimization</strong>: The same task was completed in just 6 seconds</li>
    </ul>
  </li>
  <li>The reduced execution time enabled more stable product operations and saved the company from considering alternative pricing methods, thereby saving opportunity costs.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Language (English)" /><category term="Article (Issue Resolution)" /><category term="Level (3. Advanced)" /><category term="Field (Analytics Engineering)" /><category term="Skills (SQL)" /><summary type="html"><![CDATA[“Calculating complex Rolling Metrics like Rolling MAU can consume significant time and cost on large datasets. A task that previously took over 6 hours with the original query was reduced to 6 seconds through query optimization and the use of a B-tree Index. This process significantly enhanced data processing efficiency by minimizing unnecessary memory usage and maximizing query performance. As a result, the company was able to manage Rolling MAU metrics more efficiently, contributing to infrastructure cost savings.”]]></summary></entry></feed>